<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Allors.R1.Framework</name>
    </assembly>
    <members>
        <member name="T:Allors.R1.Meta.AssociationType">
            <summary>
            An <see cref="T:Allors.R1.Meta.AssociationType"/> defines the association side of a relation.
            This is also called the 'active', 'controlling' or 'owning' side.
            AssociationTypes can only have composite <see cref="P:Allors.R1.Meta.AssociationType.ObjectType"/>s.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.MetaObject">
            <summary>
            Base class for Meta objects.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsInternal">
            <summary>
            The <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsInternal"/> interface needs to be implemented by
            <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject"/>s. It's is required for managing the
            Relations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsInternal.GetRole(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType)">
            <param name="relation">The relation.</param>
            <returns></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsInternal.SetRole(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType,System.Object)">
            <param name="relation">The relation.</param>
            <param name="role">The role. </param>
            <returns></returns>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject">
            <summary>
            AllorsObjects are objects that are held in an AllorsPopulation
            and their lifecycle is managed through an AllorsSession.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsClassMetaObject.isDeleted">
            <summary>
            Do not use, this is an Allors internal field.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsClassMetaObject.session">
            <summary>
            Do not use, this is an Allors internal field.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsClassMetaObject.id">
            <summary>
            Do not use, this is an Allors internal field.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassMetaObject.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassMetaObject"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassMetaObject.AllorsAssert">
            <summary>
            Asserts that this Object is in the right state.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassMetaObject.AllorsAssert(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject)">
            <summary>
            Asserts that this Object and the related Object are in the right state.
            </summary>
            <param name="relatedObject">The related object.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassMetaObject.AllorsAssert(System.Collections.ICollection)">
            <summary>
            Asserts that this Object and the related Objects are in the right state.
            </summary>
            <param name="relatedObjects">The related objects.</param>
        </member>
        <member name="F:Allors.R1.Meta.MetaObject.IdComparer">
            <summary>
            Gets the id comparer for meta objects.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MetaObject.RemoveId">
            <summary>
            Removes the Id.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MetaObject.SendChangedEvent">
            <summary>
            Send a changed event.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MetaObject.Validate(Allors.R1.Meta.ValidationLog)">
            <summary>
            Validate this object.
            </summary>
            <param name="validationLog">
            The validation log.
            </param>
        </member>
        <member name="M:Allors.R1.Meta.MetaObject.CopyMetaObject(Allors.R1.Meta.MetaObject)">
            <summary>
            Copy from the source meta object.
            </summary>
            <param name="source">
            The source meta object.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown when this object already has an id that is different from the source object.
            </exception>
        </member>
        <member name="P:Allors.R1.Meta.MetaObject.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The meta object id.</value>
        </member>
        <member name="P:Allors.R1.Meta.MetaObject.IdAsNumberString">
            <summary>
            Gets the id as a number only string.
            </summary>
            <value>The id as a number only string.</value>
        </member>
        <member name="P:Allors.R1.Meta.MetaObject.IdAsString">
            <summary>
            Gets the id as a string.
            </summary>
            <value>The id as a string.</value>
        </member>
        <member name="P:Allors.R1.Meta.MetaObject.Domain">
            <summary>
            Gets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Allors.R1.Meta.MetaObject.ValidationName">
            <summary>
            Gets the validation name.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.MetaObject.PrivateIdComparer">
            <summary>
            The id comparer.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MetaObject.PrivateIdComparer.Compare(Allors.R1.Meta.MetaObject,Allors.R1.Meta.MetaObject)">
            <summary>
            Compares two relationTypes by id.
            </summary>
            <returns>
            The result of the comparison.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassOperandType.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassOperandType"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="P:Allors.R1.Meta.OperandType.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassPropertyType.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassPropertyType"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.PropertyType.GetObjectType">
            <summary>
            Get the object type.
            </summary>
            <returns>
            The <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.PropertyType.Get(Allors.R1.IStrategy)">
            <summary>
            Get the value of the property on this object.
            </summary>
            <param name="strategy">
            The strategy.
            </param>
            <returns>
            The operand value.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.PropertyType.Name">
            <summary>
            Gets the operand name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassAssociationType.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassAssociationType"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassAssociationType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsClassAssociationType.AllorsObjectTypeId">
            <summary>
            Gets the Object Type Id.
            </summary>
            <value>The Object Type Id.</value>
        </member>
        <member name="F:Allors.R1.Meta.AssociationType.Where">
            <summary>
            Used to form names to navigate from <see cref="P:Allors.R1.Meta.AssociationType.RoleType"/> To <see cref="T:Allors.R1.Meta.AssociationType"/>;
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.SendChangedEvent">
            <summary>
            Send a changed event.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.GetObjectType">
            <summary>
            Get the object type.
            </summary>
            <returns>
            The <see cref="P:Allors.R1.Meta.AssociationType.ObjectType"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.Get(Allors.R1.IStrategy)">
            <summary>
            Get the value of the association on this object.
            </summary>
            <param name="strategy">
            The strategy.
            </param>
            <returns>
            The association value.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.Delete">
            <summary>
            Deletes this instance.
            </summary>
            <exception cref="T:System.NotSupportedException">
            It is not possible to directly delete an association.
            </exception>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.RemoveAssignedPluralName">
            <summary>
            Removes the AssignedPluralName.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.RemoveAssignedSingularName">
            <summary>
            Removes the AssignedSingularName.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.RemoveIsMany">
            <summary>
            Removes the IsMany.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.RemoveObjectType">
            <summary>
            Removes the ObjectType.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="session">The session.</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.InternalDelete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.Copy(Allors.R1.Meta.AssociationType)">
            <summary>
            Copy form source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.PurgeDerivations">
            <summary>
            Purges the derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.DeriveMultiplicity">
            <summary>
            Derive the multiplicity.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.DeriveRootName">
            <summary>
            Derives the root name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.DeriveRootType">
            <summary>
            Derives the root type.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.Validate(Allors.R1.Meta.ValidationLog)">
            <summary>
            Validates this object.
            </summary>
            <param name="validationLog">The validation information.</param>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.EnsureRelationTypeDerivations">
            <summary>
            Ensures that the relation type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AssociationType.StaleRelationTypeDerivations">
            <summary>
            Make the relation type derivations stale.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name .</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.FullName">
            <summary>
            Gets the name.
            </summary>
            <value>The name .</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.AssignedPluralName">
            <summary>
            Gets or sets the name of the assigned plural.
            </summary>
            <value>The name of the assigned plural.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.AssignedSingularName">
            <summary>
            Gets or sets the name of the assigned singular.
            </summary>
            <value>The name of the assigned singular.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.ExistRootTypes">
            <summary>
            Gets a value indicating whether there exist root <see cref="P:Allors.R1.Meta.AssociationType.ObjectType"/>s.
            </summary>
            <value><c>true</c> if there exists root <see cref="P:Allors.R1.Meta.AssociationType.ObjectType"/>s; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.FullPluralName">
            <summary>
            Gets the the full plural name.
            </summary>
            <value>The full name of the plural.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.FullSingularName">
            <summary>
            Gets the full singular name.
            </summary>
            <value>The full name of the singular.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.IsAssignedPluralNameDefault">
            <summary>
            Gets a value indicating whether this instance's <see cref="P:Allors.R1.Meta.AssociationType.AssignedPluralName"/> is default.
            </summary>
            <value>
            <c>true</c> if this instance's <see cref="P:Allors.R1.Meta.AssociationType.AssignedPluralName"/> is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.IsAssignedSingularNameDefault">
            <summary>
            Gets a value indicating whether this instance's <see cref="P:Allors.R1.Meta.AssociationType.AssignedSingularName"/> is default.
            </summary>
            <value>
             <c>true</c> if this instance's <see cref="P:Allors.R1.Meta.AssociationType.AssignedPluralName"/> is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.IsIsManyDefault">
            <summary>
            Gets a value indicating whether this instance's <see cref="P:Allors.R1.Meta.AssociationType.IsMany"/> is default.
            </summary>
            <value>
             <c>true</c> if this instance's <see cref="P:Allors.R1.Meta.AssociationType.IsMany"/> is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.IsMany">
            <summary>
            Gets or sets a value indicating whether this instance has a multiplicity of many.
            </summary>
            <value><c>true</c> if this instance is many; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.IsObjectTypeDefault">
            <summary>
            Gets a value indicating whether this instance's <see cref="P:Allors.R1.Meta.AssociationType.ObjectType"/> is default.
            </summary>
            <value>
             <c>true</c> if this instance's <see cref="P:Allors.R1.Meta.AssociationType.ObjectType"/> is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.IsOne">
            <summary>
            Gets or sets a value indicating whether this instance has a multiplicity of one.
            </summary>
            <value><c>true</c> if this instance is one; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.ObjectType">
            <summary>
            Gets or sets ObjectType.
            </summary>
            <value>The ObjectType.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.PluralName">
            <summary>
            Gets the plural name.
            </summary>
            <value>The plural name.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.RelationType">
            <summary>
            Gets the relation type.
            </summary>
            <value>The type of the relation.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.RoleType">
            <summary>
            Gets the role.
            </summary>
            <value>The role .</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.RootName">
            <summary>
            Gets the root name.
            </summary>
            <value>The name of the root.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.RootTypes">
            <summary>
            Gets the root types.
            </summary>
            <value>The root types.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.SingularName">
            <summary>
            Gets the singular name.
            </summary>
            <value>The name of the singular.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.ValidationName">
            <summary>
            Gets the validation name.
            </summary>
            <value>The name of the validation.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.WherePluralName">
            <summary>
            Gets the plural name when using <see cref="F:Allors.R1.Meta.AssociationType.Where"/>.
            </summary>
            <value>The plural name when using <see cref="F:Allors.R1.Meta.AssociationType.Where"/>.</value>
        </member>
        <member name="P:Allors.R1.Meta.AssociationType.WhereSingularName">
            <summary>
            Gets the singular name when using <see cref="F:Allors.R1.Meta.AssociationType.Where"/>.
            </summary>
            <value>The singular name when using <see cref="F:Allors.R1.Meta.AssociationType.Where"/>.</value>
        </member>
        <member name="T:Allors.R1.Meta.Domain">
            <summary>
            A Domain is a container for <see cref="T:Allors.R1.Meta.ObjectType"/>s, <see cref="T:Allors.R1.Meta.RelationType"/>s.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassDomain.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassDomain"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassDomain.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsClassDomain.AllorsObjectTypeId">
            <summary>
            Gets the Object Type Id.
            </summary>
            <value>The Object Type Id.</value>
        </member>
        <member name="F:Allors.R1.Meta.Domain.DefaultPluralForm">
            <summary>
            The default plural form.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.MetaObjectByIdSessionKey">
            <summary>
            The session key for all objects by id.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.DomainSessionKey">
            <summary>
            The session key for the <see cref="T:Allors.R1.Meta.Domain"/>
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.DomainsSessionKey">
            <summary>
            The session key for the <see cref="T:Allors.R1.Meta.Domain"/>s.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.AllorsUnitDomainName">
            <summary>
            The name of the Allors Unit Domain.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.Version">
            <summary>
            The version.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.AllorsUnitDomainId">
            <summary>
            The id of the Allors Domain.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.hasStaleObjectTypeDerivations">
            <summary>
            True if the type derivations are stale, false otherwise.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.hasStaleInheritanceDerivations">
            <summary>
            True if the inheritance derivations are stale, false otherwise.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.hasStaleRelationDerivations">
            <summary>
            True if the relation derivations are stale, false otherwise.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.Domain.hasStaleMethodDerivations">
            <summary>
            True if the method derivations are stale, false otherwise.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Create">
            <summary>
            Creates a new instance.
            </summary>
            <returns>The new domain.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Create(System.Guid)">
            <summary>
            Creates a new instance with the specified id.
            </summary>
            <param name="id">The domain id.</param>
            <returns>The new domain.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.GetDomain(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject)">
            <summary>
            Get the domain for an Allors object.
            </summary>
            <param name="allorsObject">
            The Allors object.
            </param>
            <returns>
            The <see cref="T:Allors.R1.Meta.Domain"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Load(System.Xml.XmlReader)">
            <summary>
            Loads the <see cref="T:Allors.R1.Meta.Domain"/> from the xml reader.
            </summary>
            <param name="xmlReader">The xml reader.</param>
            <returns>The domain.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Find(System.Guid)">
            <summary>
            Find a meta object by meta object id.
            </summary>
            <param name="metaObjectId">
            The meta object id.
            </param>
            <returns>
            The <see cref="T:Allors.R1.Meta.MetaObject"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDeclaredInheritance(Allors.R1.Meta.Inheritance)">
            <summary>
            Adds the <see cref="T:Allors.R1.Meta.Inheritance"/> to this domain.
            </summary>
            <param name="inheritance">The inheritance.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDeclaredInheritance(System.Guid)">
            <summary>
            Adds the <see cref="T:Allors.R1.Meta.Inheritance"/> to this domain.
            </summary>
            <param name="inheritanceId">The inheritance id.</param>
            <returns>The added inheritance.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDeclaredObjectType(Allors.R1.Meta.ObjectType)">
            <summary>
            Adds the <see cref="T:Allors.R1.Meta.ObjectType"/> to this domain.
            </summary>
            <param name="objectType">The object type.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDeclaredObjectType(System.Guid)">
            <summary>
            Adds the <see cref="T:Allors.R1.Meta.ObjectType"/> to this domain.
            </summary>
            <param name="objectTypeId">The object type id.</param>
            <returns>The object type.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDeclaredRelationType(Allors.R1.Meta.RelationType)">
            <summary>
            Adds the <see cref="T:Allors.R1.Meta.RelationType"/> to this domain.
            </summary>
            <param name="relationType">The relation type.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDeclaredRelationType(System.Guid,System.Guid,System.Guid)">
            <summary>
            Adds the <see cref="T:Allors.R1.Meta.RelationType"/> to this domain.
            </summary>
            <param name="relationTypeId">
            The relation type id.
            </param>
            <param name="associationTypeId">
            The association Type Id.
            </param>
            <param name="roleTypeId">
            The role Type Id.
            </param>
            <returns>
            The relation type.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDeclaredMethodType(Allors.R1.Meta.MethodType)">
            <summary>
            Adds the <see cref="T:Allors.R1.Meta.MethodType"/> to this domain.
            </summary>
            <param name="methodType">The method type.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDeclaredMethodType(System.Guid)">
            <summary>
            Adds the <see cref="T:Allors.R1.Meta.MethodType"/> to this domain.
            </summary>
            <param name="methodTypeId">The method type id.</param>
            <returns>The method type.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDirectSuperDomain(Allors.R1.Meta.Domain)">
            <summary>
            Adds a domain to this domain.
            </summary>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDirectSuperDomain(System.Guid)">
            <summary>
            Adds the domain to this domain.
            </summary>
            <param name="domainId">The domain id.</param>
            <returns>The domain.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveDirectSuperDomain(Allors.R1.Meta.Domain)">
            <summary>
            Removes the Defined domain from this domain.
            </summary>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveDirectSuperDomains">
            <summary>
            Removes all direct importSuperDomain domains from this domain.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Inherit(Allors.R1.Meta.Domain)">
            <summary>
            Import the domain and inherit from it.
            </summary>
            <param name="domain">The domain to import and inherit from.</param>
            <returns>The importSuperDomain domain.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Extent(System.Type)">
            <summary>
            Create an extent for this type.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The extent.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the type is not a domain type.
            </exception>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveId">
            <summary>
            Removes the Id.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveDeclaredInheritance(Allors.R1.Meta.Inheritance)">
            <summary>
            Removes the Defined <see cref="T:Allors.R1.Meta.Inheritance"/> from this domain.
            </summary>
            <param name="inheritance">The inheritance.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveDeclaredInheritances">
            <summary>
            Removes all Defined <see cref="T:Allors.R1.Meta.Inheritance"/>s from this domain.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveDeclaredObjectType(Allors.R1.Meta.ObjectType)">
            <summary>
            Removes the Defined <see cref="T:Allors.R1.Meta.ObjectType"/> from this domain.
            </summary>
            <param name="objectType">The object type.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveDeclaredObjectTypes">
            <summary>
            Removes all Defined <see cref="T:Allors.R1.Meta.ObjectType"/>s from this domain.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveDeclaredRelationType(Allors.R1.Meta.RelationType)">
            <summary>
            Removes the Defined <see cref="T:Allors.R1.Meta.RelationType"/> from this domain.
            </summary>
            <param name="relationType">The relation type.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.RemoveDeclaredRelationTypes">
            <summary>
            Removes all Defined <see cref="T:Allors.R1.Meta.RelationType"/>s from this domain.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the <see cref="T:Allors.R1.Meta.Domain"/> to the specified writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns>The Validate.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.GetDomain(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession)">
            <summary>
            Gets the domain.
            </summary>
            <param name="session">The session.</param>
            <returns>The domain.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.IsCyclicInheritance(System.Collections.Generic.List{Allors.R1.Meta.Domain})">
            <summary>
            Determines whether adding the specified domain will result in a cycle.
            </summary>
            <param name="superDomains">The importSuperDomain domains.</param>
            <returns>
            <c>true</c> if adding the specified domain will result in a cycle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.SendChangedEvent(Allors.R1.Meta.MetaObject)">
            <summary>
            Sends the meta object changed event.
            </summary>
            <param name="metaObject">The meta object.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.SendDeletedEvent(System.Guid)">
            <summary>
            Sends the meta object deleted event.
            </summary>
            <param name="metaObjectId">
            The meta Object Id.
            </param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.StaleInheritanceDerivations">
            <summary>
            Stales the inheritance derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.StaleObjectTypeDerivations">
            <summary>
            Stales the object type derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.EnsureObjectTypeDerivations">
            <summary>
            Ensures that object type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.StaleRelationTypeDerivations">
            <summary>
            Stales the relation type derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.EnsureRelationTypeDerivations">
            <summary>
            Ensures that relation type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.StaleMethodTypeDerivations">
            <summary>
            Stales the method type derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.EnsureMethodTypeDerivations">
            <summary>
            Ensures that relation type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Validate(Allors.R1.Meta.ValidationLog)">
            <summary>
            Validates the domain.
            </summary>
            <param name="validationLog">The validation.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Guid)">
            <summary>
            Creates the specified session.
            </summary>
            <param name="session">The session.</param>
            <param name="domainId">The domain id.</param>
            <returns>The new domain.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Domain.CacheConcreteDomain(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,Allors.R1.Meta.Domain)">
            <summary>
            Caches the concrete domain.
            </summary>
            <param name="session">The session.</param>
            <param name="concreteDomain">The concrete domain.</param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.PurgeDerivations">
            <summary>
            Purges the derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.EnsureInheritanceDerivations">
            <summary>
            Ensures that inheritance derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.StaleDomainDerivations">
            <summary>
            Stales the domain derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.EnsureDomainDerivations">
            <summary>
            Ensure the domain derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.EnsureDerivedSuperDomains">
            <summary>
            Ensure the derived importSuperDomain domains.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddDerivedSuperDomain(System.Collections.Generic.List{Allors.R1.Meta.Domain})">
            <summary>
            Add a derived importSuperDomain domain.
            </summary>
            <param name="temporaryList">
            A temporary list of domains.
            </param>
        </member>
        <member name="M:Allors.R1.Meta.Domain.AddAllorsUnitPopulation">
            <summary>
            Adds the default population.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Domain.Inherit(Allors.R1.Meta.Domain,Allors.R1.Meta.Domain)">
            <summary>
            Import the source super domain into the domain and
            then create a inheritance relationship in the domain.
            </summary>
            <param name="domain">
            The domain.
            </param>
            <param name="sourceSuperDomain">
            The source super domain.
            </param>
            <returns>
            The super domain.
            </returns>
        </member>
        <member name="E:Allors.R1.Meta.Domain.MetaObjectChanged">
            <summary>
            Occurs when a meta object is changed.
            </summary>
        </member>
        <member name="E:Allors.R1.Meta.Domain.MetaObjectDeleted">
            <summary>
            Occurs when a meta object is deleted.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.Domain.Extension">
            <summary>
            Gets or sets the user defined object that will act as an extension.
            </summary>
            <value>The user defined extension object.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.CompositeObjectTypes">
            <summary>
            Gets the composite types.
            </summary>
            <value>The composite types.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.ConcreteCompositeObjectTypes">
            <summary>
            Gets the concrete composite types.
            </summary>
            <value>The concrete composite types.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.Domains">
            <summary>
            Gets the domains.
            </summary>
            <value>The domains.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.Inheritances">
            <summary>
            Gets the inheritances.
            </summary>
            <value>The inheritances.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.IsAllorsUnitDomain">
            <summary>
            Gets a value indicating whether this instance is the allors unit domain.
            </summary>
            <value>
             <c>true</c> if this instance is the allors unit domain; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.IsSuperDomain">
            <summary>
            Gets a value indicating whether this domain is a domain.
            </summary>
            <value><c>true</c> if this domain is a domain; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.Xml">
            <summary>
            Gets the saved population as an xml string.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.Domain.DeclaredInheritances">
            <summary>
            Gets or sets the inheritances that are Defined to this domain.
            </summary>
            <value>The Defined inheritances.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.DeclaredObjectTypes">
            <summary>
            Gets or sets the object types that are Defined to this domain.
            </summary>
            <value>The Defined object types.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.DeclaredRelationTypes">
            <summary>
            Gets or sets relation types that are Defined to this domain.
            </summary>
            <value>The Defined relation types.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.SuperDomains">
            <summary>
            Gets all the importSuperDomain domains of this domain.
            </summary>
            <value>The importSuperDomain domain.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.DirectSuperDomains">
            <summary>
            Gets or sets the direct importSuperDomain domains of this domain.
            </summary>
            <value>The direct importSuperDomain domains.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.ObjectTypes">
            <summary>
            Gets the object types.
            </summary>
            <value>The object types.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.MethodTypes">
            <summary>
            Gets the relation types.
            </summary>
            <value>The relation types.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.RelationTypes">
            <summary>
            Gets the relation types.
            </summary>
            <value>The relation types.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.UnitObjectTypes">
            <summary>
            Gets the unit types.
            </summary>
            <value>The unit types.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.MetaObjectById">
            <summary>
            Gets the domains.
            </summary>
            <value>The domains.</value>
        </member>
        <member name="P:Allors.R1.Meta.Domain.ValidationName">
            <summary>
            Gets the validation name.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.Inheritance">
            <summary>
            Defines a subtype/supertype relation between two <see cref="T:Allors.R1.Meta.ObjectType"/>s.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassInheritance.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassInheritance"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassInheritance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsClassInheritance.AllorsObjectTypeId">
            <summary>
            Gets the Object Type Id.
            </summary>
            <value>The Object Type Id.</value>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.Copy(Allors.R1.Meta.Inheritance)">
            <summary>
            Copy from source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.RemoveId">
            <summary>
            Removes the Id.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.RemoveSubtype">
            <summary>
            Removes the Subtype.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.RemoveSupertype">
            <summary>
            Removes the Supertype.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="session">The session.</param>
            <returns>The new inheritance.</returns>
        </member>
        <member name="M:Allors.R1.Meta.Inheritance.Validate(Allors.R1.Meta.ValidationLog)">
            <summary>
            Validates this instance.
            </summary>
            <param name="validationLog">The validation.</param>
        </member>
        <member name="P:Allors.R1.Meta.Inheritance.IsSubtypeDefault">
            <summary>
            Gets a value indicating whether this subtype is default.
            </summary>
            <value>
             <c>true</c> if this subtype is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.Inheritance.IsSupertypeDefault">
            <summary>
            Gets a value indicating whether the supertype is default.
            </summary>
            <value>
             <c>true</c> if the supertype is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.Inheritance.Subtype">
            <summary>
            Gets or sets the subtype.
            </summary>
            <value>The Subtype.</value>
        </member>
        <member name="P:Allors.R1.Meta.Inheritance.Supertype">
            <summary>
            Gets or sets the supertype.
            </summary>
            <value>The Supertype.</value>
        </member>
        <member name="P:Allors.R1.Meta.Inheritance.ValidationName">
            <summary>
            Gets the validation name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassMethodType.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassMethodType"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassMethodType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsClassMethodType.AllorsObjectTypeId">
            <summary>
            Gets the Object Type Id.
            </summary>
            <value>The Object Type Id.</value>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.Copy(Allors.R1.Meta.MethodType)">
            <summary>
            Copy from source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.RemoveName">
            <summary>
            Removes the Name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.RemoveObjectType">
            <summary>
            Removes the ObjectType.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.RemoveId">
            <summary>
            Removes the Id.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="session">The session.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.Validate(Allors.R1.Meta.ValidationLog)">
            <summary>
            Validates the instance.
            </summary>
            <param name="validationLog">The validation.</param>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.StaleMethodTypeDerivations">
            <summary>
            Stales the relation type derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.MethodType.GetMethodInfo(Allors.R1.ObjectBase)">
            <summary>
            Get the <see cref="T:System.Reflection.MethodInfo"/> from the MethodType for this object.
            </summary>
            <param name="objectBase">
            The object.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.MethodType.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.MethodType.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Allors.R1.Meta.MethodType.ObjectType">
            <summary>
            Gets or sets the ObjectType.
            </summary>
            <value>The ObjectType.</value>
        </member>
        <member name="P:Allors.R1.Meta.MethodType.IsObjectTypeDefault">
            <summary>
            Gets a value indicating whether this instance's <see cref="P:Allors.R1.Meta.MethodType.ObjectType"/> is default.
            </summary>
            <value>
             <c>true</c> if this instance's <see cref="P:Allors.R1.Meta.MethodType.ObjectType"/> is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.MethodType.IsNameDefault">
            <summary>
            Gets a value indicating whether this instance's <see cref="P:Allors.R1.Meta.MethodType.Name"/> is default.
            </summary>
            <value>
            <c>true</c> if this instance's <see cref="P:Allors.R1.Meta.MethodType.Name"/> is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.MethodType.ValidationName">
            <summary>
            Gets the validation name.
            </summary>
            <value>The validation name.</value>
        </member>
        <member name="T:Allors.R1.Meta.ObjectType">
            <summary>
            An <see cref="T:Allors.R1.Meta.ObjectType"/> defines the state and behavior for
            a set of <see cref="T:Allors.R1.IObject"/>s.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassObjectType.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassObjectType"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassObjectType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsClassObjectType.AllorsObjectTypeId">
            <summary>
            Gets the Object Type Id.
            </summary>
            <value>The Object Type Id.</value>
        </member>
        <member name="F:Allors.R1.Meta.ObjectType.EmptyArray">
            <summary>
            An empty array of object types.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ObjectType.associationIdsCache">
            <summary>
            A cache for the ids of the <see cref="P:Allors.R1.Meta.ObjectType.AssociationTypes"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ObjectType.roleIdsCache">
            <summary>
            A cache for the ids of the <see cref="P:Allors.R1.Meta.ObjectType.RoleTypes"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ObjectType.concreteClassesCache">
            <summary>
            A cache for the ids of the <see cref="P:Allors.R1.Meta.ObjectType.RoleTypes"/>.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.AddDirectSupertype(Allors.R1.Meta.ObjectType)">
            <summary>
            Adds the direct supertype.
            </summary>
            <param name="supertype">The supertype.</param>
            <returns>The inheritance.</returns> 
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.AddMethodType(System.Guid,System.String)">
            <summary>
            Adds a <see cref="T:Allors.R1.Meta.MethodType"/> to this object.
            </summary>
            <param name="methodId">The method id</param>
            <param name="methodName">The method name</param>
            <returns>The method type</returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.Copy(Allors.R1.Meta.ObjectType)">
            <summary>
            Copy form source.
            </summary>
            <param name="source">
            The source.
            </param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.ContainsAssociationType(Allors.R1.Meta.AssociationType)">
            <summary>
            Determines whether this instance contains the specified association.
            </summary>
            <param name="association">The association.</param>
            <returns>
             <c>true</c> if this instance contains the specified association; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.ContainsRoleType(Allors.R1.Meta.RoleType)">
            <summary>
            Determines whether this instance contains the specified role.
            </summary>
            <param name="role">The role .</param>
            <returns>
             <c>true</c> if this instance contains the specified role; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.ContainsConcreteClass(Allors.R1.Meta.ObjectType)">
            <summary>
            Contains this concrete class.
            </summary>
            <param name="objectType">
            The concrete class.
            </param>
            <returns>
            True if this contains the concrete class.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeleteRecursive">
            <summary>
            Delete this instance and its associations and inheritances.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.FindInheritanceWhereDirectSubtype(Allors.R1.Meta.ObjectType)">
            <summary>
            Finds the inheritance where this instance is the direct subtype.
            </summary>
            <param name="supertype">The supertype.</param>
            <returns>The inheritance.</returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.IsValidSupertype(Allors.R1.Meta.ObjectType)">
            <summary>
            Determines whether the specified super type is a valid super type.
            </summary>
            <param name="supertype">The super type.</param>
            <returns>
             <c>true</c> if the specified super type is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.RemoveId">
            <summary>
            Removes the Id.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.RemovePluralName">
            <summary>
            Removes the plural name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.RemoveSingularName">
            <summary>
            Removes the singular name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.SetDirectSuperinterfaces(Allors.R1.Meta.ObjectType[])">
            <summary>
            Sets the direct super interfaces.
            </summary>
            <param name="superInterfaces">The super interfaces.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="session">The session.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.EnsureRelationTypeDerivations">
            <summary>
            Ensures that relation type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.IsCyclicInheritance(Allors.R1.Meta.ObjectType)">
            <summary>
            Determines whether adding the specified super type will result in a cycle.
            </summary>
            <param name="superType">The super type.</param>
            <returns>
            <c>true</c> if adding the specified super type will result in a cycle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.PurgeDerivations">
            <summary>
            Purges the derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.StaleRelationTypeDerivations">
            <summary>
            Stales the relation type derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveAssociationTypes(System.Collections.Generic.HashSet{Allors.R1.Meta.AssociationType})">
            <summary>
            Derive association types.
            </summary>
            <param name="associations">The associations.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveCompositeRoleTypes(System.Collections.Generic.HashSet{Allors.R1.Meta.RoleType})">
            <summary>
            Derive composite role types.
            </summary>
            <param name="roles">The roles.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveAssociationIdsCache">
            <summary>
            Derive association ids cache.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveRoleTypeIdsCache">
            <summary>
            Derive role ids cache.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveConcreteClassesCache">
            <summary>
            Derive concrete classes cache.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveDirectSuperclass">
            <summary>
            Derive direct superclass.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveDirectSuperinterface(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive direct super interface.
            </summary>
            <param name="directSuperinterfaces">The direct super interfaces.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveDirectSupertypes(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive direct super type derivations.
            </summary>
            <param name="directSupertypes">The direct super types.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveExclusiveAssociationTypes(System.Collections.Generic.HashSet{Allors.R1.Meta.AssociationType})">
            <summary>
            Derive exclusive association types.
            </summary>
            <param name="exclusiveAssociationTypes">The exclusive association types.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveExclusiveConcreteLeafClass(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive exclusive concrete leaf classes.
            </summary>
            <param name="concreteLeafClasses">The concrete leaf classes.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveExclusiveRoleTypes(System.Collections.Generic.HashSet{Allors.R1.Meta.RoleType})">
            <summary>
            Derive exclusive roles.
            </summary>
            <param name="exclusiveRoles">The exclusive roles.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveExclusiveSuperinterfaces(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive exclusive super interfaces.
            </summary>
            <param name="superInterfaces">The super interfaces.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveMethodTypes(System.Collections.Generic.HashSet{Allors.R1.Meta.MethodType})">
            <summary>
            Derive method types.
            </summary>
            <param name="methodTypes">
            The method types.
            </param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveRoleTypes(System.Collections.Generic.HashSet{Allors.R1.Meta.RoleType})">
            <summary>
            Derive role types.
            </summary>
            <param name="roleTypes">The role types.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveRootClassForClasses">
            <summary>
            Derive root class for classes.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveRootClassForInterfaces(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive root class for interfaces.
            </summary>
            <param name="rootClasses">The root classes.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveSubclasses(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive subclasses.
            </summary>
            <param name="subClasses">The sub classes.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveSubinterfaces(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive sub interfaces.
            </summary>
            <param name="subInterfaces">The sub interfaces.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveSuperclasses(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive super classes.
            </summary>
            <param name="superClasses">The super classes.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveSuperinterfaces(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive super interface.
            </summary>
            <param name="superInterfaces">The super interfaces.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveSupertypes(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive super types.
            </summary>
            <param name="superTypes">The super types.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveUnitRoleTypes(System.Collections.Generic.HashSet{Allors.R1.Meta.RoleType})">
            <summary>
            Derive unit role types.
            </summary>
            <param name="roles">The roles.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.Validate(Allors.R1.Meta.ValidationLog)">
            <summary>
            Validates this instance.
            </summary>
            <param name="validationLog">The validation.</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.EnsureMethodTypeDerivations">
            <summary>
            Ensures that method type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.EnsureObjectTypeDerivations">
            <summary>
            Ensures that object type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.GetUnitRoleTypes(Allors.R1.Meta.UnitTypeTags)">
            <summary>
            Gets the unit roles.
            </summary>
            <param name="unitTypeTags">The unit type tag.</param>
            <returns>The roles.</returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.IsImplementedByAnyOf(System.Collections.Generic.IEnumerable{Allors.R1.Meta.ObjectType})">
            <summary>
            Determines whether this instance is implemented by any of the specified object types.
            </summary>
            <param name="objectTypes">The object types.</param>
            <returns>
             <c>true</c> if this instance is implemented by any of the specified object types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveRootClassForClassRecursively(Allors.R1.Meta.ObjectType)">
            <summary>
            Derive root class for class recursively.
            </summary>
            <param name="type">The type .</param>
        </member>
        <member name="M:Allors.R1.Meta.ObjectType.DeriveSupertypesRecursively(Allors.R1.Meta.ObjectType,System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive super types recursively.
            </summary>
            <param name="type">The type .</param>
            <param name="superTypes">The super types.</param>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Extension">
            <summary>
            Gets or sets the user defined object that will act as an extension.
            </summary>
            <value>The user defined extension object.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.AssociationTypesCount">
            <summary>
            Gets the association count.
            </summary>
            <value>The association count.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.AssociationTypesCountGreaterThan32">
            <summary>
            Gets a value indicating whether the association count is greater than 32.
            </summary>
            <value>
            <c>true</c> if association count is greater than 32; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.AssociationTypes">
            <summary>
            Gets the associations.
            </summary>
            <value>The associations.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.AssociationTypesWhereRootType">
            <summary>
            Gets the associations where this instance is the root type.
            </summary>
            <value>The associations where this instance is the root type.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.BinaryRoles">
            <summary>
            Gets the binary roles.
            </summary>
            <value>The binary roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.BooleanRoles">
            <summary>
            Gets the boolean roles.
            </summary>
            <value>The boolean roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.DoubleRoleTypes">
            <summary>
            Gets the double roles.
            </summary>
            <value>The double roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.DateTimeRoleTypes">
            <summary>
            Gets the date time role types.
            </summary>
            <value>The date time role types.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.DecimalRoleTypes">
            <summary>
            Gets the decimal role types.
            </summary>
            <value>The decimal role types.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Integer32Roles">
            <summary>
            Gets the integer32 roles.
            </summary>
            <value>The integer32 roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Integer64Roles">
            <summary>
            Gets the integer64 roles.
            </summary>
            <value>The integer64 roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.StringRoleTypes">
            <summary>
            Gets the string roles.
            </summary>
            <value>The string roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.CompositeRoleTypeCount">
            <summary>
            Gets the composite role count.
            </summary>
            <value>The composite role count.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.CompositeRoleTypeCountGreaterThan32">
            <summary>
            Gets a value indicating whether the composite role count is greater than 32.
            </summary>
            <value>
            <c>true</c> if the composite role count is greater than32; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.CompositeRoleTypes">
            <summary>
            Gets the composite roles.
            </summary>
            <value>The composite roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ConcreteClasses">
            <summary>
            Gets the concrete sub classes or
            self if this is a concrete class.
            </summary>
            <value>The concrete classes.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.DirectSubtypes">
            <summary>
            Gets the direct subtypes.
            </summary>
            <value>The direct subtypes.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.DirectSuperclass">
            <summary>
            Gets the direct superclass.
            </summary>
            <value>The direct superclass.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.DirectSuperinterfaces">
            <summary>
            Gets the direct super interfaces.
            </summary>
            <value>The direct super interfaces.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.DirectSupertypes">
            <summary>
            Gets the direct super types.
            </summary>
            <value>The direct super types.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExclusiveAssociationTypes">
            <summary>
            Gets the exclusive associations.
            </summary>
            <value>The exclusive associations.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExclusiveConcreteSubclass">
            <summary>
            Gets the exclusive concrete subclass.
            </summary>
            <value>The exclusive concrete subclass.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExclusiveRoleTypes">
            <summary>
            Gets the exclusive roles.
            </summary>
            <value>The exclusive roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExclusiveRootClass">
            <summary>
            Gets the exclusive root class.
            </summary>
            <value>The exclusive root class.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExclusiveSuperinterfaces">
            <summary>
            Gets the exclusive super interfaces.
            </summary>
            <value>The exclusive super interfaces.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistConcreteClasses">
            <summary>
            Gets a value indicating whether there exist concrete classes.
            </summary>
            <value>
             <c>true</c> if there exist concrete classes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistDirectSuperclass">
            <summary>
            Gets a value indicating whether there exists a direct superclass.
            </summary>
            <value>
             <c>true</c> if there exists a direct superclass; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistDirectSuperinterfaces">
            <summary>
            Gets a value indicating whether there exists direct super interfaces.
            </summary>
            <value>
             <c>true</c> if there exists direct super interfaces; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistDirectSupertypes">
            <summary>
            Gets a value indicating whether there exists direct super types.
            </summary>
            <value>
            <c>true</c> if there exists direct super types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistExclusiveConcreteSubclass">
            <summary>
            Gets a value indicating whether there exists an exclusive concrete subclass.
            </summary>
            <value>
            <c>true</c> if there exists an exclusive concrete subclass; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistExclusiveRootClass">
            <summary>
            Gets a value indicating whether [exist exclusive root class].
            </summary>
            <value>
            <c>true</c> if [exist exclusive root class]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistRootClasses">
            <summary>
            Gets a value indicating whether there exist root classes.
            </summary>
            <value><c>true</c> if there exist root classes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistSubclasses">
            <summary>
            Gets a value indicating whether there exist subclasses.
            </summary>
            <value><c>true</c> if there exist subclasses; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ExistSuperclasses">
            <summary>
            Gets a value indicating whether there exists super classes.
            </summary>
            <value><c>true</c> if there exist super classes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsAbstractComposite">
            <summary>
            Gets a value indicating whether this instance is an abstract composite.
            </summary>
            <value>
             <c>true</c> if this instance is an abstract composite; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsBinary">
            <summary>
            Gets a value indicating whether this instance is a binary.
            </summary>
            <value><c>true</c> if this instance is a binary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsBoolean">
            <summary>
            Gets a value indicating whether this instance is a boolean.
            </summary>
            <value>
            <c>true</c> if this instance is a boolean; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsClass">
            <summary>
            Gets a value indicating whether this instance is a class.
            </summary>
            <value><c>true</c> if this instance is a class; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsComposite">
            <summary>
            Gets a value indicating whether this instance is a composite.
            </summary>
            <value>
             <c>true</c> if this instance is a composite; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsConcrete">
            <summary>
            Gets a value indicating whether this instance is concrete.
            </summary>
            <value>
             <c>true</c> if this instance is concrete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsConcreteComposite">
            <summary>
            Gets a value indicating whether this instance is a concrete composite.
            </summary>
            <value>
             <c>true</c> if this instance is a concrete composite; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsDateTime">
            <summary>
            Gets a value indicating whether this instance is a date time.
            </summary>
            <value>
             <c>true</c> if this instance is a date time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsDecimal">
            <summary>
            Gets a value indicating whether this instance is a decimal.
            </summary>
            <value>
             <c>true</c> if this instance is a decimal; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsAssignedPluralNameDefault">
            <summary>
            Gets a value indicating whether this instance's assigned plural name is default.
            </summary>
            <value>
            <c>true</c> if this instance's assigned plural name is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsAssignedSingularNameDefault">
            <summary>
            Gets a value indicating whether this instance's assigned singular name is default.
            </summary>
            <value>
             <c>true</c> if this instance's assigned singular name is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsIsAbstractDefault">
            <summary>
            Gets a value indicating whether this instance's is abstract is default.
            </summary>
            <value>
            <c>true</c> if this instance's is abstract is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsIsInterfaceDefault">
            <summary>
            Gets a value indicating whether this instance is interface is default.
            </summary>
            <value>
            <c>true</c> if this instance is is interface default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsIsUnitDefault">
            <summary>
            Gets a value indicating whether this instance is unit is default.
            </summary>
            <value>
             <c>true</c> if this instance is unit is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsUnitTagDefault">
            <summary>
            Gets a value indicating whether this instance unit tag is default.
            </summary>
            <value>
            <c>true</c> if this instance unit tag is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsDouble">
            <summary>
            Gets a value indicating whether this instance is a double.
            </summary>
            <value><c>true</c> if this instance is a double; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsInteger">
            <summary>
            Gets a value indicating whether this instance is an integer.
            </summary>
            <value>
             <c>true</c> if this instance is an integer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsInterface">
            <summary>
            Gets or sets a value indicating whether this instance is an interface.
            </summary>
            <value>
             <c>true</c> if this instance is an interface; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsLong">
            <summary>
            Gets a value indicating whether this instance is long.
            </summary>
            <value><c>true</c> if this instance is a long; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsPrecisionRequired">
            <summary>
            Gets a value indicating whether this instance requires precision.
            </summary>
            <value>
             <c>true</c> if this instance requires precision; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsRootClass">
            <summary>
            Gets a value indicating whether this instance is a root class.
            </summary>
            <value>
             <c>true</c> if this instance is a root class; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsScaleRequired">
            <summary>
            Gets a value indicating whether this instance requires a scale.
            </summary>
            <value>
             <c>true</c> if this instance requires a scale; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsSizeRequired">
            <summary>
            Gets a value indicating whether this instance requires a size.
            </summary>
            <value>
             <c>true</c> if this instance requires a size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsString">
            <summary>
            Gets a value indicating whether this instance is a string.
            </summary>
            <value><c>true</c> if this instance is a string; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.IsUnique">
            <summary>
            Gets a value indicating whether this instance is a unique.
            </summary>
            <value><c>true</c> if this instance is a unique; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name .</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ObjectTypesWhereDirectSuperclass">
            <summary>
            Gets the object types where this instance is a direct superclass.
            </summary>
            <value>The object types where this instance is a direct superclass.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ObjectTypesWhereDirectSuperinterface">
            <summary>
            Gets the object types where this instance is a direct super interface.
            </summary>
            <value>The object types where this instance is a direct super interface.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ObjectTypesWhereExclusiveSuperinterface">
            <summary>
            Gets the object types where this instance is an exclusive super interface.
            </summary>
            <value>The object types where this instance is an exclusive super interface.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ObjectTypesWhereRootClass">
            <summary>
            Gets the object types where this instance is the root class.
            </summary>
            <value>The object types where this instance is the root class.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ObjectTypesWhereSuperclass">
            <summary>
            Gets the object types where this instance is the super class.
            </summary>
            <value>The object types where this instance is the super class.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ObjectTypesWhereSuperinterface">
            <summary>
            Gets the object types where this instance is the super interface.
            </summary>
            <value>The object types where this instance is the super interface.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.PluralName">
            <summary>
            Gets or sets the plural name.
            </summary>
            <value>The plural name.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.MethodTypes">
            <summary>
            Gets the method types.
            </summary>
            <value>The method types.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.RoleTypeCount">
            <summary>
            Gets the role count.
            </summary>
            <value>The role count.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.RoleTypeCountGreaterThan32">
            <summary>
            Gets a value indicating whether the role count is greater than 32.
            </summary>
            <value>
             <c>true</c> if the role count is greater than32; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.RoleTypes">
            <summary>
            Gets the roles.
            </summary>
            <value>The roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.RolesTypesWhereRootType">
            <summary>
            Gets the roles where this instance is the root type.
            </summary>
            <value>The roles where this instance is the root type.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.RootClasses">
            <summary>
            Gets the root classes.
            </summary>
            <value>The root classes.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.SingularName">
            <summary>
            Gets or sets the singular name.
            </summary>
            <value>The singular name.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Subclasses">
            <summary>
            Gets the subclasses.
            </summary>
            <value>The subclasses.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Subinterfaces">
            <summary>
            Gets the sub interfaces.
            </summary>
            <value>The sub interfaces.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Subtypes">
            <summary>
            Gets the subtypes.
            </summary>
            <value>The subtypes.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Superclasses">
            <summary>
            Gets the super classes.
            </summary>
            <value>The super classes.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Superinterfaces">
            <summary>
            Gets the super interfaces.
            </summary>
            <value>The super interfaces.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.Supertypes">
            <summary>
            Gets the super types.
            </summary>
            <value>The super types.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.UniqueRoleTypes">
            <summary>
            Gets the unique roles.
            </summary>
            <value>The unique roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.UnitRoleTypesCount">
            <summary>
            Gets the unit role count.
            </summary>
            <value>The unit role count.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.UnitRoleTypesCountGreaterThan32">
            <summary>
            Gets a value indicating whether the unit role count is greater than32.
            </summary>
            <value>
             <c>true</c> if the unit role count is greater than 32; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.UnitRoleTypes">
            <summary>
            Gets the unit roles.
            </summary>
            <value>The unit roles.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ValidationName">
            <summary>
            Gets the validation name.
            </summary>
            <value>The validation name.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ConcreteSubClasses">
            <summary>
            Gets the concrete sub classes.
            </summary>
            <value>The concrete sub classes.</value>
        </member>
        <member name="P:Allors.R1.Meta.ObjectType.ObjectTypesWhereDirectSupertype">
            <summary>
            Gets the object types where this instance is a direct supertype.
            </summary>
            <value>The object types where this instance is a direct supertype.</value>
        </member>
        <member name="T:Allors.R1.Meta.RelationType">
            <summary>
            A <see cref="T:Allors.R1.Meta.RelationType"/> defines the state and behavior for
            a set of <see cref="P:Allors.R1.Meta.RelationType.AssociationType"/>s and <see cref="P:Allors.R1.Meta.RelationType.RoleType"/>s.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassRelationType.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassRelationType"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassRelationType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsClassRelationType.AllorsObjectTypeId">
            <summary>
            Gets the Object Type Id.
            </summary>
            <value>The Object Type Id.</value>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.Copy(Allors.R1.Meta.RelationType)">
            <summary>
            Copy from source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.RemoveId">
            <summary>
            Removes the Id.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="session">The session.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.EnsureRelationTypeDerivations">
            <summary>
            Ensures that relation type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.PurgeDerivations">
            <summary>
            Purges the derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RelationType.Validate(Allors.R1.Meta.ValidationLog)">
            <summary>
            Validates this. instance.
            </summary>
            <param name="validationLog">The validation.</param>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.AssociationType">
            <summary>
            Gets or sets the <see cref="P:Allors.R1.Meta.RelationType.AssociationType"/>.
            </summary>
            <value>The AssociationType.</value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.ExistExclusiveRootClasses">
            <summary>
            Gets a value indicating whether there exist exclusive root classes.
            </summary>
            <value>
             <c>true</c> if [exist exclusive root classes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.IsIsIndexedDefault">
            <summary>
            Gets a value indicating whether this instance's is indexed is default.
            </summary>
            <value>
             <c>true</c> if this instance is indexed default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.IsIsDerivedDefault">
            <summary>
            Gets a value indicating whether this instance's is derived is default.
            </summary>
            <value>
             <c>true</c> if this instance is derived default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.IsManyToMany">
            <summary>
            Gets a value indicating whether this instance is many to many.
            </summary>
            <value>
             <c>true</c> if this instance is many to many; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.IsManyToOne">
            <summary>
            Gets a value indicating whether this instance is many to one.
            </summary>
            <value>
             <c>true</c> if this instance is many to one; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.IsOneToMany">
            <summary>
            Gets a value indicating whether this instance is one to many.
            </summary>
            <value>
             <c>true</c> if this instance is one to many; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.IsOneToOne">
            <summary>
            Gets a value indicating whether this instance is one to one.
            </summary>
            <value>
             <c>true</c> if this instance is one to one; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name  .</value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.ReverseName">
            <summary>
            Gets the name of the reverse.
            </summary>
            <value>The name of the reverse.</value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.RoleType">
            <summary>
            Gets or sets the <see cref="P:Allors.R1.Meta.RelationType.RoleType"/>.
            </summary>
            <value>The RoleType    .</value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.SafeName">
            <summary>
            Gets the safe name.
            </summary>
            <value>The safe name.</value>
        </member>
        <member name="P:Allors.R1.Meta.RelationType.ValidationName">
            <summary>
            Gets the validation name.
            </summary>
            <value>The validation name.</value>
        </member>
        <member name="T:Allors.R1.Meta.RoleType">
            <summary>
            A <see cref="T:Allors.R1.Meta.RoleType"/> defines the role side of a relation.
            This is also called the 'passive' side.
            RoleTypes can have composite and unit <see cref="P:Allors.R1.Meta.RoleType.ObjectType"/>s.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassRoleType.#ctor(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsClassRoleType"/> class.
            </summary>
            <param name="session">The Allors Session.</param>
            <param name="id">The Allors Object Id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsClassRoleType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsClassRoleType.AllorsObjectTypeId">
            <summary>
            Gets the Object Type Id.
            </summary>
            <value>The Object Type Id.</value>
        </member>
        <member name="F:Allors.R1.Meta.RoleType.MaximumSize">
            <summary>
            The maximum size value.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.Copy(Allors.R1.Meta.RoleType)">
            <summary>
            Copy from source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.SendChangedEvent">
            <summary>
            Send the changed event.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.RemoveId">
            <summary>
            Removes the Id.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.RemoveAssignedPluralName">
            <summary>
            Removes the assigned plural name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.RemoveAssignedSingularName">
            <summary>
            Removes the assigned singular name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.RemoveIsMany">
            <summary>
            Removes the is many.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.RemoveObjectType">
            <summary>
            Removes the object type.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.RemoveSize">
            <summary>
            Remove size.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.RemoveScale">
            <summary>
            Remove scale.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.RemovePrecision">
            <summary>
            Remove precision.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.GetObjectType">
            <summary>
            Get the object type.
            </summary>
            <returns>
            The <see cref="P:Allors.R1.Meta.RoleType.ObjectType"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.Get(Allors.R1.IStrategy)">
            <summary>
            Get the value of the role on this object.
            </summary>
            <param name="strategy">
            The strategy.
            </param>
            <returns>
            The role value.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.Set(Allors.R1.IStrategy,System.Object)">
            <summary>
            Set the value of the role on this object.
            </summary>
            <param name="strategy">
            The strategy.
            </param>
            <param name="value">
            The role value.
            </param>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="session">The session.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.InternalDelete">
            <summary>
            Delete for internal purpose.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.PurgeDerivations">
            <summary>
            Purges the derivations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.DeriveMultiplicityScaleAndSize">
            <summary>
            Derive multiplicity, scale and size.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.DeriveRootTypes">
            <summary>
            Derive root objectTypes.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.DeriveHierarchyPluralName(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive hierarchy plural name.
            </summary>
            <param name="objectTypes">The object Types.</param>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.DeriveHierarchySingularName(System.Collections.Generic.HashSet{Allors.R1.Meta.ObjectType})">
            <summary>
            Derive hierarchy singular name.
            </summary>
            <param name="objectTypes">The object types.</param>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.DeriveRootName">
            <summary>
            Derive root name.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.Validate(Allors.R1.Meta.ValidationLog)">
            <summary>
            Validates the instance.
            </summary>
            <param name="validationLog">The validation.</param>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.EnsureRelationTypeDerivations">
            <summary>
            Ensures that the relation type derivations are up to date.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.RoleType.StaleRelationTypeDerivations">
            <summary>
            Stales the relation type derivations.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.AssignedSingularName">
            <summary>
            Gets or sets the assigned singular name.
            </summary>
            <value>The assigned plural name.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.AssignedPluralName">
            <summary>
            Gets or sets the assigned plural name.
            </summary>
            <value>The assigned plural name.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name .</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.SingularName">
            <summary>
            Gets the singular name.
            </summary>
            <value>The singular name.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.PluralName">
            <summary>
            Gets the plural name.
            </summary>
            <value>The plural name.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.FullName">
            <summary>
            Gets the name.
            </summary>
            <value>The name .</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.FullSingularName">
            <summary>
            Gets the full singular name.
            </summary>
            <value>The full singular name.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.FullPluralName">
            <summary>
            Gets the full plural name.
            </summary>
            <value>The full plural name.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.RootName">
            <summary>
            Gets the name of the root.
            </summary>
            <value>The name of the root.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.HierarchySingularName">
            <summary>
            Gets the hierarchy singular name.
            </summary>
            <value>The name of the hierarchy singular.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.HierarchyPluralName">
            <summary>
            Gets the hierarchy plural name.
            </summary>
            <value>The name of the hierarchy plural.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsOne">
            <summary>
            Gets or sets a value indicating whether this instance has multiplicity one.
            </summary>
            <value><c>true</c> if this instance's multiplicity is one; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsMany">
            <summary>
            Gets or sets a value indicating whether this instance has multiplicity is many.
            </summary>
            <value><c>true</c> if this instance has multiplicity many; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.ExistSize">
            <summary>
            Gets a value indicating whether size exists.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.ExistScale">
            <summary>
            Gets a value indicating whether scale exists.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.ExistPrecision">
            <summary>
            Gets a value indicating whether precision exists.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.RelationType">
            <summary>
            Gets the type of the relation.
            </summary>
            <value>The type of the relation.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.AssociationType">
            <summary>
            Gets the association.
            </summary>
            <value>The association.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.ObjectType">
            <summary>
            Gets or sets <see cref="P:Allors.R1.Meta.RoleType.ObjectType"/>.
            </summary>
            <value>The ObjectType.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.RootTypes">
            <summary>
            Gets the root objectTypes.
            </summary>
            <value>The root objectTypes.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.ExistRootTypes">
            <summary>
            Gets a value indicating whether there exist root objectTypes.
            </summary>
            <value><c>true</c> if there exist root objectTypes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsAssignedSingularNameDefault">
            <summary>
            Gets a value indicating whether this instance's assigned singular name is default.
            </summary>
            <value>
             <c>true</c> if this instance's assigned singular name is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsAssignedPluralNameDefault">
            <summary>
            Gets a value indicating whether this instance's assigned plural name is default.
            </summary>
            <value>
             <c>true</c> if this instance's assigned plural name is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsIsManyDefault">
            <summary>
            Gets a value indicating whether this instance's is many is default.
            </summary>
            <value>
             <c>true</c> if this instance's is many is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsObjectTypeDefault">
            <summary>
            Gets a value indicating whether this instance's object type is default.
            </summary>
            <value>
             <c>true</c> if this instance object type is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsPrecisionDefault">
            <summary>
            Gets a value indicating whether this instance's precision is default.
            </summary>
            <value>
             <c>true</c> if this instance's precision is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsScaleDefault">
            <summary>
            Gets a value indicating whether this instance's scale is default.
            </summary>
            <value>
             <c>true</c> if this instance's is default scale; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.IsSizeDefault">
            <summary>
            Gets a value indicating whether this instance's size is default.
            </summary>
            <value>
             <c>true</c> if this instance's size is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.Meta.RoleType.ValidationName">
            <summary>
            Gets the validation name.
            </summary>
            <value>The validation name.</value>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession">
            <summary>
            An AllorsSession is a transactional session that
            provides lifecycle management to objects in the population.
            Transactions are 'rolling'. After committing or rolling back
            a transaction an new transaction is automatically started,
            there is no need to manually 'begin' a transaction.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.currentId">
            <summary>
            The <see cref="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.currentId"/> field holds the highest id issued.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.allorsObjects">
            <summary>
            The <see cref="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.allorsObjects"/> field holds all of <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject"/>s in this poulation keyed by their ids.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.state">
            <summary>
            The <see cref="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.state"/> field holds a Dictionary of user supplied key/value pairs.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Commit">
            <summary>
            Commits all changes that where made during this transaction.
            Because transactions are rolling, a new transaction is automatically created.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Rollback">
            <summary>
            Rolls back all changes that where made during this transaction.
            Because transactions are rolling, a new transaction is automatically created.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Extent(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType)">
            <summary>
            Creates an Extent for the specified ObjectType.
            </summary>
            <param name="objectType">The ObjectType.</param>
            <returns></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Extent">
            <summary>
            Creates an Extent for the whole population.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Instantiate(System.Int32)">
            <summary>
            Instantiates an Allors Object.
            </summary>
            <param name="objectId">The object id.</param>
            <returns></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType)">
            <summary>
            Creates an Allors Object.
            </summary>
            <param name="objectType">The ObjectType.</param>
            <returns>a new <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject"/></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Insert(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType,System.Int32)">
            <summary>
            Inserts an Allors Object with the specified id.
            </summary>
            <param name="objectType">The <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType"/>.</param>
            <param name="objectId">The object id.</param>
            <returns></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Create(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType,System.Int32)">
            <param name="type">The ObjectType.</param>
            <param name="id">The Object Id.</param>
            <returns>a new <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject"/></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the population to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.SavePopulation(System.Xml.XmlWriter)">
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.SaveObjects(System.Xml.XmlWriter,System.Collections.Hashtable)">
            <param name="writer">The writer.</param>
            <param name="embeddedObjectsByObjectTypeId">The embedded objects by object type id.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.SaveRelations(System.Xml.XmlWriter,System.Collections.Hashtable)">
            <param name="writer">The writer.</param>
            <param name="strategiesByObjectType">The strategies by object type.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Load(System.Xml.XmlReader)">
            <summary>
            Loads the population from the <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.LoadRepository(System.Xml.XmlReader)">
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.LoadObjects(System.Xml.XmlReader)">
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.LoadObjectType(System.Xml.XmlReader)">
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.LoadRelationTypes(System.Xml.XmlReader)">
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.LoadRelations(System.Xml.XmlReader,System.Boolean)">
            <param name="reader">The reader.</param>
            <param name="isUnit">if set to <c>true</c> the relation's Role has an Unit Object Type.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.LoadUnitRelations(System.Xml.XmlReader,Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType)">
            <param name="reader">The reader.</param>
            <param name="relation">The relation.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.LoadCompositeRelations(System.Xml.XmlReader,Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType)">
            <param name="reader">The reader.</param>
            <param name="relation">The relation.</param>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedSession.Item(System.String)">
            <summary>
            Session state are simple key/value pairs.
            Because AllorsObjects can not hold instance variables, this is the only way
            for AllorsObjects to hold references to Non-Allors objects or Allors objects
            from a different population.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType">
            <summary>
            An <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType"/> defines the state and behavior for
            a Set of <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject"/>s.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType.#ctor(System.Guid,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <param name="isConcreteComposite">if set to <c>true</c> then this type is a Concrete Composite Type.</param>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType.#ctor(System.Guid,System.Type,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <param name="isConcreteComposite">if set to <c>true</c> then this type is a Concrete Composite Type.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType">
            <summary>
            An <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType"/> defines the state and behavior for
            a Set of relations.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType.#ctor(System.Guid,System.Int32,System.String,Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="tag">The tag.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="IsUnit">if set to <c>true</c> the Role's Object Type is a Unit.</param>
            <param name="isMany">if set to <c>true</c> the Role's multiplicity is Many.</param>
        </member>
        <member name="P:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType.IsOne">
            <summary>
            Gets a value indicating whether this relation has a Role with multiplicity one.
            </summary>
            <value><c>true</c> if this instance has a Role with multiplicity one; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain">
            <summary>
            An AllorsEmbeddedDomain groups related <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType"/>s and
            <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObjectType"/>s
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.LookupRelationByTag(System.String)">
            <summary>
            Lookups the relation by tag.
            </summary>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.LookupRelationById(System.Guid)">
            <summary>
            Lookups the relation by id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.LookupTypeById(System.Guid)">
            <summary>
            Lookups the type by id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.PropertyType">
            <summary>
            The PropertyType Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AssociationType">
            <summary>
            The AssociationType Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.MetaObject">
            <summary>
            The MetaObject Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.Domain">
            <summary>
            The Domain Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleType">
            <summary>
            The RoleType Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.OperandType">
            <summary>
            The OperandType Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RelationType">
            <summary>
            The RelationType Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.Inheritance">
            <summary>
            The Inheritance Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectType">
            <summary>
            The ObjectType Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.MethodType">
            <summary>
            The MethodType Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsString">
            <summary>
            The AllorsString Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsInteger">
            <summary>
            The AllorsInteger Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsLong">
            <summary>
            The AllorsLong Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsDecimal">
            <summary>
            The AllorsDecimal Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsDouble">
            <summary>
            The AllorsDouble Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsBoolean">
            <summary>
            The AllorsBoolean Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsDateTime">
            <summary>
            The AllorsDateTime Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsUnique">
            <summary>
            The AllorsUnique Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AllorsBinary">
            <summary>
            The AllorsBinary Object Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedExclusiveAssociationType">
            <summary>
            The ObjectTypeDerivedExclusiveAssociationType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDeclaredObjectType">
            <summary>
            The DomainDeclaredObjectType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.InheritanceSubtype">
            <summary>
            The InheritanceSubtype Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainName">
            <summary>
            The DomainName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedExclusiveSuperinterface">
            <summary>
            The ObjectTypeDerivedExclusiveSuperinterface Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AssociationTypeAssignedPluralName">
            <summary>
            The AssociationTypeAssignedPluralName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedSubclass">
            <summary>
            The ObjectTypeDerivedSubclass Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDeclaredMethodType">
            <summary>
            The DomainDeclaredMethodType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedAssociationType">
            <summary>
            The ObjectTypeDerivedAssociationType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedDirectSupertype">
            <summary>
            The ObjectTypeDerivedDirectSupertype Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AssociationTypeObjectType">
            <summary>
            The AssociationTypeObjectType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.MetaObjectId">
            <summary>
            The MetaObjectId Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDerivedSuperDomain">
            <summary>
            The DomainDerivedSuperDomain Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedDirectSuperclass">
            <summary>
            The ObjectTypeDerivedDirectSuperclass Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypePluralName">
            <summary>
            The ObjectTypePluralName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeObjectType">
            <summary>
            The RoleTypeObjectType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeDerivedRootType">
            <summary>
            The RoleTypeDerivedRootType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RelationTypeIsDerived">
            <summary>
            The RelationTypeIsDerived Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AssociationTypeIsMany">
            <summary>
            The AssociationTypeIsMany Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeScale">
            <summary>
            The RoleTypeScale Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedMethodType">
            <summary>
            The ObjectTypeDerivedMethodType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypePrecision">
            <summary>
            The RoleTypePrecision Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDeclaredInheritance">
            <summary>
            The DomainDeclaredInheritance Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDirectSuperDomain">
            <summary>
            The DomainDirectSuperDomain Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeSize">
            <summary>
            The RoleTypeSize Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainUnitDomain">
            <summary>
            The DomainUnitDomain Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDerivedUnitObjectType">
            <summary>
            The DomainDerivedUnitObjectType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedSuperinterface">
            <summary>
            The ObjectTypeDerivedSuperinterface Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDerivedCompositeObjectType">
            <summary>
            The DomainDerivedCompositeObjectType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeDerivedHierarchyPluralName">
            <summary>
            The RoleTypeDerivedHierarchyPluralName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeDerivedHierarchySingularName">
            <summary>
            The RoleTypeDerivedHierarchySingularName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeAssignedPluralName">
            <summary>
            The RoleTypeAssignedPluralName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeDerivedRootName">
            <summary>
            The RoleTypeDerivedRootName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeIsInterface">
            <summary>
            The ObjectTypeIsInterface Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedSubinterface">
            <summary>
            The ObjectTypeDerivedSubinterface Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeIsUnit">
            <summary>
            The ObjectTypeIsUnit Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedExclusiveConcreteLeafClass">
            <summary>
            The ObjectTypeDerivedExclusiveConcreteLeafClass Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AssociationTypeDerivedRootObjectType">
            <summary>
            The AssociationTypeDerivedRootObjectType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AssociationTypeDerivedRootName">
            <summary>
            The AssociationTypeDerivedRootName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedDirectSuperinterface">
            <summary>
            The ObjectTypeDerivedDirectSuperinterface Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.MethodTypeObjectType">
            <summary>
            The MethodTypeObjectType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.MethodTypeName">
            <summary>
            The MethodTypeName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RelationTypeIsIndexed">
            <summary>
            The RelationTypeIsIndexed Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDeclaredRelationType">
            <summary>
            The DomainDeclaredRelationType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeIsMany">
            <summary>
            The RoleTypeIsMany Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedUnitRoleType">
            <summary>
            The ObjectTypeDerivedUnitRoleType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDerivedRelationType">
            <summary>
            The DomainDerivedRelationType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedRootClass">
            <summary>
            The ObjectTypeDerivedRootClass Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDerivedMethodType">
            <summary>
            The DomainDerivedMethodType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDerivedInheritance">
            <summary>
            The DomainDerivedInheritance Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RoleTypeAssignedSingularName">
            <summary>
            The RoleTypeAssignedSingularName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RelationTypeRoleType">
            <summary>
            The RelationTypeRoleType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeUnitTag">
            <summary>
            The ObjectTypeUnitTag Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedCompositeRoleType">
            <summary>
            The ObjectTypeDerivedCompositeRoleType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedSuperclass">
            <summary>
            The ObjectTypeDerivedSuperclass Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeIsAbstract">
            <summary>
            The ObjectTypeIsAbstract Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.AssociationTypeAssignedSingularName">
            <summary>
            The AssociationTypeAssignedSingularName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedRoleType">
            <summary>
            The ObjectTypeDerivedRoleType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.DomainDerivedObjectType">
            <summary>
            The DomainDerivedObjectType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.InheritanceSupertype">
            <summary>
            The InheritanceSupertype Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeSingularName">
            <summary>
            The ObjectTypeSingularName Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedExclusiveRoleType">
            <summary>
            The ObjectTypeDerivedExclusiveRoleType Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.ObjectTypeDerivedSupertype">
            <summary>
            The ObjectTypeDerivedSupertype Relation Type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.RelationTypeAssociationType">
            <summary>
            The RelationTypeAssociationType Relation Type.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain.#cctor">
            <summary>
            Initializes the <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain"/> class.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays">
            <summary>
            The <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays"/> class is a Utility class 
            for maniupulating <see cref="T:System.Array"/>'s.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.Exist(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject[],Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject)">
            <summary>
            Checks if the object exists in this Array.
            </summary>
            <param name="objectArray">The object array.</param>
            <param name="value">The value.</param>
            <returns>true if the object exists in this Array</returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.Add(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject[],Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject)">
            <summary>
            Adds the specified object to the Array.
            </summary>
            <param name="objectArray">The object array.</param>
            <param name="value">The object.</param>
            <returns>The new object Array</returns>
        </member>
        <member name="M:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.Remove(Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject[],Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject)">
            <summary>
            Removes the specified object array.
            </summary>
            <param name="objectArray">The object array.</param>
            <param name="value">The object.</param>
            <returns>The new object Array</returns>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_PropertyType_ARRAY">
            <summary>
            An empty array of PropertyTypes.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_AssociationType_ARRAY">
            <summary>
            An empty array of AssociationTypes.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_MetaObject_ARRAY">
            <summary>
            An empty array of MetaObjects.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_Domain_ARRAY">
            <summary>
            An empty array of Domains.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_RoleType_ARRAY">
            <summary>
            An empty array of RoleTypes.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_OperandType_ARRAY">
            <summary>
            An empty array of OperandTypes.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_RelationType_ARRAY">
            <summary>
            An empty array of RelationTypes.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_Inheritance_ARRAY">
            <summary>
            An empty array of Inheritances.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_ObjectType_ARRAY">
            <summary>
            An empty array of ObjectTypes.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedArrays.EMPTY_MethodType_ARRAY">
            <summary>
            An empty array of MethodTypes.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedXml">
            <summary>
            The <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedXml"/> class defines the tags and
            constants necessary for saving and loading populations to Xml files.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsTypeTags">
            <summary>
            The <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsTypeTags"/> hold the tags for all <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedObject"/>s
            in this <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain"/>.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.AllorsGenerated.AllorsRelationTags">
            <summary>
            The <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsRelationTags"/> hold the tags for all relations
            in this <see cref="T:Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedDomain"/>.
            </summary>
        </member>
        <member name="T:Allors.R1.Extent`1">
            <summary>
            The Extent of a <see cref="P:Allors.R1.Extent`1.ObjectType"/> is the set of all objects that either
            - are of the specified <see cref="P:Allors.R1.Extent`1.ObjectType"/>
            - inherit from the specified <see cref="P:Allors.R1.Extent`1.ObjectType"/>
            The extent can be filter based on predicates.
            </summary>
            <typeparam name="T">The .Net type of the extent.</typeparam>
        </member>
        <member name="F:Allors.R1.Extent`1.extent">
            <summary>
            The non generic extent that will be a subject for this proxy.
            </summary>
        </member>
        <member name="M:Allors.R1.Extent`1.#ctor(Allors.R1.Extent)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Extent`1"/> class. 
            </summary>
            <param name="extent">
            The extent.
            </param>
        </member>
        <member name="M:Allors.R1.Extent`1.op_Implicit(Allors.R1.IObject[])~Allors.R1.Extent{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Allors.R1.IObject"/> to <see cref="T:Allors.R1.Extent"/>.
            </summary>
            <param name="objects">The objects.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.op_Implicit(Allors.R1.Extent)~Allors.R1.Extent{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Allors.R1.IObject"/> to <see cref="T:Allors.R1.Extent"/>.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.op_Implicit(Allors.R1.Extent{`0})~Allors.R1.Extent">
            <summary>
            Performs an implicit conversion from <see cref="T:Allors.R1.Extent"/> to <see cref="T:Allors.R1.IObject"/>.
            </summary>
            <param name="genericExtent">The extent.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.op_Implicit(Allors.R1.Extent{`0})~`0[]">
            <summary>
            Performs an implicit conversion from <see cref="T:Allors.R1.Extent"/> to <see cref="T:Allors.R1.IObject"/>.
            </summary>
            <param name="genericExtent">The extent.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.op_Implicit(Allors.R1.Extent{`0})~Allors.R1.IObject[]">
            <summary>
            Performs an implicit conversion from <see cref="T:Allors.R1.Extent"/> to <see cref="T:Allors.R1.IObject"/>.
            </summary>
            <param name="genericExtent">The extent.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Allors.R1.Extent`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Allors.R1.Extent`1.AddSort(Allors.R1.Meta.RoleType)">
            <summary>
            Adds sorting based on the specified relation type..
            </summary>
            <param name="roleType">The role type by which to sort.</param>
            <returns>The current extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.AddSort(Allors.R1.Meta.RoleType,Allors.R1.SortDirection)">
            <summary>
            Adds sorting based on the specified relation type..
            </summary>
            <param name="roleType">The role type by which to sort.</param>
            <param name="direction">The sort direction.</param>
            <returns>The current extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Allors.R1.Extent`1.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:Allors.R1.Extent`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
             <paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
             <paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="M:Allors.R1.Extent`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-ObjectType T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Allors.R1.Extent`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Allors.R1.Extent`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:Allors.R1.Extent`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
        </member>
        <member name="M:Allors.R1.Extent`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:Allors.R1.Extent`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Allors.R1.Extent`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Allors.R1.Extent`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:Allors.R1.Extent`1.ToArray">
            <summary>
            Toes the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.ToArray(System.Type)">
            <summary>
            Toes the array.
            </summary>
            <param name="type">The type .</param>
            <returns>The array.</returns>
        </member>
        <member name="M:Allors.R1.Extent`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Allors.R1.Extent`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="P:Allors.R1.Extent`1.BaseExtent">
            <summary>
            Gets the non generic extent.
            </summary>
            <value>The non generic extent.</value>
        </member>
        <member name="P:Allors.R1.Extent`1.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>The filter is a top level AND filter. If you require an OR or a NOT filter
            then simply add it to this AND filter.</value>
        </member>
        <member name="P:Allors.R1.Extent`1.First">
            <summary>
            Gets the first object from the Extent.
            If there are no objects then null is returned.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Allors.R1.Extent`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Allors.R1.Extent`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Allors.R1.Extent`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Allors.R1.Extent`1.ObjectType">
            <summary>
            Gets the type.
            </summary>
            <value>The type of the Extent.</value>
        </member>
        <member name="P:Allors.R1.Extent`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:Allors.R1.Extent`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="P:Allors.R1.Extent`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:System.Object"/> at the specified index</value>
        </member>
        <member name="T:Allors.R1.IWorkspaceFactory">
            <summary>
            A factory for new workspace objects.
            </summary>
        </member>
        <member name="M:Allors.R1.IWorkspaceFactory.CreateWorkspace(Allors.R1.IDatabase)">
            <summary>
            Creates a new workspace.
            </summary>
            <param name="database">The database</param>
            <returns>The workspace</returns>
        </member>
        <member name="T:Allors.R1.Extent">
            <summary>
            The Extent of a <see cref="T:Allors.R1.Meta.ObjectType"/> is the set of all objects that either
            - are of the specified <see cref="T:Allors.R1.Meta.ObjectType"/>
            - inherit from the specified <see cref="T:Allors.R1.Meta.ObjectType"/>
            The extent can be filtered based on predicates.
            </summary>
        </member>
        <member name="M:Allors.R1.Extent.op_Implicit(Allors.R1.IObject[])~Allors.R1.Extent">
            <summary>
            Performs an implicit conversion from <see cref="T:Allors.R1.IObject"/> to <see cref="T:Allors.R1.Extent"/>.
            </summary>
            <param name="objects">The objects.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Allors.R1.Extent.op_Implicit(Allors.R1.Extent)~Allors.R1.IObject[]">
            <summary>
            Performs an implicit conversion from <see cref="T:Allors.R1.Extent"/> to <see cref="T:Allors.R1.IObject"/>.
            </summary>
            <param name="extent">The extent.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Allors.R1.Extent.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            This method is not supported.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Allors.R1.Extent.AddSort(Allors.R1.Meta.RoleType)">
            <summary>
            Adds sorting based on the specified relation type.
            </summary>
            <param name="roleType">The role type by which to sort.</param>
            <returns>The current extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent.AddSort(Allors.R1.Meta.RoleType,Allors.R1.SortDirection)">
            <summary>
            Adds sorting based on the specified role type and direction.
            </summary>
            <param name="roleType">The role type by which to sort.</param>
            <param name="direction">The sort direction.</param>
            <returns>The current extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent.AddSort(Allors.R1.Sort)">
            <summary>
            Adds sorting based on the specified sort specification.
            </summary>
            <param name="sort">The sort specification.</param>
            <returns>The current extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"></see>.
            This method is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:Allors.R1.Extent.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:Allors.R1.Extent.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.
            This method is not supported.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="M:Allors.R1.Extent.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.
            This method is not supported.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Allors.R1.Extent.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"></see> item at the specified index.
            This method is not supported.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Allors.R1.Extent.ToArray">
            <summary>
            Gets the extent as an array.
            </summary>
            <returns>An array containing the objects of this extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent.ToArray(System.Type)">
            <summary>
            Gets the extent as an array.
            </summary>
            <param name="type">The type of the array.</param>
            <returns>An array containing the objects of this extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="P:Allors.R1.Extent.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Allors.R1.Extent.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>The filter is a top level AND filter. If you require an OR or a NOT filter
            then simply add it to this AND filter.</value>
        </member>
        <member name="P:Allors.R1.Extent.First">
            <summary>
            Gets the first object from the Extent.
            If there are no objects then null is returned.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Allors.R1.Extent.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Allors.R1.Extent.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Allors.R1.Extent.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Allors.R1.Extent.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Allors.R1.Extent.ObjectType">
            <summary>
            Gets the object type of this extent.
            </summary>
            <value>The type of the Extent.</value>
        </member>
        <member name="P:Allors.R1.Extent.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Allors.R1.IObject"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:Allors.R1.IObject"/> at the specified index</value>
            <returns>The object at the specified index</returns>
        </member>
        <member name="P:Allors.R1.Extent.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The <see cref="T:System.Object"/> at the specified index</value>
            <returns>The object at the specified index</returns>
        </member>
        <member name="T:Allors.R1.Extent.AllorsExtentConverted">
            <summary>
            A adapter extent that wraps an array of allors objects.
            </summary>
        </member>
        <member name="F:Allors.R1.Extent.AllorsExtentConverted.EmptyObjects">
            <summary>
            An array of empty objects.
            </summary>
        </member>
        <member name="F:Allors.R1.Extent.AllorsExtentConverted.objects">
            <summary>
            The objects.
            </summary>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.#ctor(Allors.R1.IObject[])">
            <summary>
            Initializes a new instance of the AllorsExtentConverted class.
            </summary>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.AddSort(Allors.R1.Meta.RoleType)">
            <summary>
            Adds sorting based on the specified relation type..
            </summary>
            <param name="roleType">The role type by which to sort.</param>
            <returns>The current extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.AddSort(Allors.R1.Meta.RoleType,Allors.R1.SortDirection)">
            <summary>
            Adds sorting based on the specified relation type..
            </summary>
            <param name="roleType">The role type by which to sort.</param>
            <param name="direction">The sort direction.</param>
            <returns>The current extent.</returns>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.ToArray">
            <summary>
            Gets the extent as an array.
            </summary>
            <returns>
            An array containing the objects of this extent.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.ToArray(System.Type)">
            <summary>
            Gets the extent as an array.
            </summary>
            <param name="type">The type of the array.</param>
            <returns>
            An array containing the objects of this extent.
            </returns>
        </member>
        <member name="M:Allors.R1.Extent.AllorsExtentConverted.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="P:Allors.R1.Extent.AllorsExtentConverted.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Allors.R1.Extent.AllorsExtentConverted.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>
            The filter is a top level AND filter. If you require an OR or a NOT filter
            then simply add it to this AND filter.
            </value>
        </member>
        <member name="P:Allors.R1.Extent.AllorsExtentConverted.First">
            <summary>
            Gets the first object from the Extent.
            If there are no objects then null is returned.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Allors.R1.Extent.AllorsExtentConverted.ObjectType">
            <summary>
            Gets the object type of this extent.
            </summary>
            <value>The type of the Extent.</value>
        </member>
        <member name="T:Allors.R1.Extent.ExtentDebugView">
            <summary>
            The extent debug view.
            </summary>
        </member>
        <member name="F:Allors.R1.Extent.ExtentDebugView.extent">
            <summary>
            The extent.
            </summary>
        </member>
        <member name="M:Allors.R1.Extent.ExtentDebugView.#ctor(Allors.R1.Extent)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Extent.ExtentDebugView"/> class.
            </summary>
            <param name="extent">
            The extent.
            </param>
        </member>
        <member name="P:Allors.R1.Extent.ExtentDebugView.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:Allors.R1.IObjectFactory">
            <summary>
            A factory for creating new IObject instances.
            </summary>
        </member>
        <member name="M:Allors.R1.IObjectFactory.Create(Allors.R1.IStrategy)">
            <summary>
            Create a new IObject instance.
            </summary>
            <param name="strategy">The strategy</param>
            <returns>a new instance</returns>
        </member>
        <member name="M:Allors.R1.IObjectFactory.GetObjectTypeForType(System.Guid)">
            <summary>
            Gets the ObjectType with the specified id.
            </summary>
            <param name="objectTypeId">
            The object type id.
            </param>
            <returns>
            The <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.IObjectFactory.GetTypeForObjectType(Allors.R1.Meta.ObjectType)">
            <summary>
            Gets the Type for the specified ObjectType
            </summary>
            <param name="objectType">The object type</param>
            <returns>The type</returns>
        </member>
        <member name="M:Allors.R1.IObjectFactory.GetObjectTypeForType(System.Type)">
            <summary>
            Gets the ObjectType for the specified Type.
            Only works for static domains.
            </summary>
            <param name="type">The type</param>
            <returns>The object type</returns>
        </member>
        <member name="P:Allors.R1.IObjectFactory.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:Allors.R1.IObjectFactory.Assembly">
            <summary>
            Gets the assembly.
            </summary>
        </member>
        <member name="P:Allors.R1.IObjectFactory.Domain">
            <summary>
            Gets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="T:Allors.R1.Meta.IObjectTypeExtension">
            <summary>
            An ObjectTypeExtension allows you to extend an object type programmatically.
            ObjectTypeExtensions are available in the second phase of a two phase generation.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.IObjectTypeExtension.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.IDomainExtension">
            <summary>
            A DomainExtension allows you to extend a domain programmatically.
            DomainExtension is available in the second phase of a two phase generation.
            </summary>
        </member>
        <member name="P:Allors.R1.Meta.IDomainExtension.Domain">
            <summary>
            Gets the domain.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.Events.MetaObjectDeletedEventArgs">
            <summary>
            The domain changed event arguments.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Events.MetaObjectDeletedEventArgs.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.Events.MetaObjectDeletedEventArgs"/> class.
            </summary>
            <param name="metaObjectId">
            The meta Object Id.
            </param>
        </member>
        <member name="P:Allors.R1.Meta.Events.MetaObjectDeletedEventArgs.MetaObjectId">
            <summary>
            Gets the meta object id.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.ValidationKind">
            <summary>
            The kind of validation that was performed.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationKind.Required">
            <summary>
            Should be present.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationKind.Format">
            <summary>
            Should be in a legal format.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationKind.Unique">
            <summary>
            Should be unique.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationKind.Exclusive">
            <summary>
            Should be mutual exclusiveness.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationKind.Hierarchy">
            <summary>
            Should be a legal hierarchy.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationKind.Multiplicity">
            <summary>
            Should be a legal multiplicity.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationKind.MinimumLength">
            <summary>
            Should have a minimum length.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationKind.Cyclic">
            <summary>
            Should not have a cycle.
            </summary>
        </member>
        <member name="T:Allors.R1.SortDirection">
            <summary>
            The sort direction.
            </summary>
        </member>
        <member name="F:Allors.R1.SortDirection.Ascending">
            <summary>
            Sort in ascending order (small to great)
            </summary>
        </member>
        <member name="F:Allors.R1.SortDirection.Descending">
            <summary>
            Sort in descending order (large to small)
            </summary>
        </member>
        <member name="T:Allors.R1.ICompositePredicate">
            <summary>
            <para> A Predicate is an expression that either returns true, false or unknown (Three Value Logic).
            A CompositePredicate is a Predicate that can contain other Predicates.</para>
            <para>CompositePredicates are applied to other predicates (And and Or) or to a single other predicate (Not).
            Non-CompositePredicates are applied to objects (InstanceOf) or to
            relations of those objects (InstanceOf,Exists,NotExists,Contains,Equals,Like,LessThan,GreaterThan and Between).</para>
            <para> Adding a CompositePredicate returns the newly added CompositePredicate,
            adding a Non-CompositePredicate returns the composing CompositePredicate to which the Non-CompositePredicate was added.
            This allows for chained method invocations, e.g predicate.AddEquals(...).AddEquals(...)</para>
            </summary>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddAnd">
            <summary>
            Adds a CompositePredicate that evaluates to true if all of its composed predicates evaluate to true.
            This predicate is ignored when there are no composed predicates.
            </summary>
            <returns>the newly added CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddBetween(Allors.R1.Meta.RoleType,System.Object,System.Object)">
            <summary>
            Adds a Predicate that evaluates to true if the role of the object under evaluation is between the first and the second object.
            </summary>
            <param name="role">The role .</param>
            <param name="firstValue">The first object.</param>
            <param name="secondValue">The second object.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddContainedIn(Allors.R1.Meta.RoleType,Allors.R1.Extent)">
            <summary>
            Adds a Predicate that evaluates to true if any object of the role of the object under evaluation is contained in the containingExtent.
            </summary>
            <param name="role">The role .</param>
            <param name="containingExtent">The extent.</param>
            <returns>this CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddContainedIn(Allors.R1.Meta.RoleType,System.Collections.Generic.IEnumerable{Allors.R1.IObject})">
            <summary>
            Adds a Predicate that evaluates to true if any object of the role of the object under evaluation is contained in the containingExtent.
            </summary>
            <param name="role">The role .</param>
            <param name="containingEnumerable">The enumerable.</param>
            <returns>This CompositePredicate. </returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddContainedIn(Allors.R1.Meta.AssociationType,Allors.R1.Extent)">
            <summary>
            Adds a Predicate that evaluates to true if any object of the association of the object under evaluation is contained in the containingExtent.
            </summary>
            <param name="association">The association.</param>
            <param name="containingExtent">The extent.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddContainedIn(Allors.R1.Meta.AssociationType,System.Collections.Generic.IEnumerable{Allors.R1.IObject})">
            <summary>
            Adds a Predicate that evaluates to true if any object of the role of the object under evaluation is contained in the containingExtent.
            </summary>
            <param name="association">The association.</param>
            <param name="containingEnumerable">The enumerable.</param>
            <returns>This CompositePredicate. </returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddContains(Allors.R1.Meta.RoleType,Allors.R1.IObject)">
            <summary>
            Adds a Predicate that evaluates to true if the role of the object under evaluation contains the allorsObject.
            </summary>
            <param name="role">The role .</param>
            <param name="containedObject">The allors object.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddContains(Allors.R1.Meta.AssociationType,Allors.R1.IObject)">
            <summary>
            Adds a Predicate that evaluates to true if the association of the object under evaluation contains the allorsObject.
            </summary>
            <param name="association">The association.</param>
            <param name="containedObject">The allors object.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddEquals(Allors.R1.IObject)">
            <summary>
            Adds a Predicate that evaluates to true if the object under evaluation equals the allorsObject.
            </summary>
            <param name="allorsObject">The allors object.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddEquals(Allors.R1.Meta.RoleType,System.Object)">
            <summary>
            Adds a Predicate that evaluates to true if the role of the object under evaluation equals the object (unit or composite).
            </summary>
            <param name="role">The role .</param>
            <param name="valueOrAllorsObject">The object.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddEquals(Allors.R1.Meta.AssociationType,Allors.R1.IObject)">
            <summary>
            Adds a Predicate that evaluates to true if the association of the object under evaluation equals the allorsObject.
            </summary>
            <param name="association">The association.</param>
            <param name="allorsObject">The allors object.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddExists(Allors.R1.Meta.RoleType)">
            <summary>
            Adds a Predicate that evaluates to true if the role of the object under evaluation exists.
            </summary>
            <param name="role">The role .</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddExists(Allors.R1.Meta.AssociationType)">
            <summary>
            Adds a Predicate that evaluates to true if the association of the object under evaluation exists.
            </summary>
            <param name="assocation">The assocation.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddGreaterThan(Allors.R1.Meta.RoleType,System.Object)">
            <summary>
            Adds a Predicate that evaluates to true if the role of the object under evaluation is greater than the object.
            </summary>
            <param name="role">The role .</param>
            <param name="value">The object.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddInstanceof(Allors.R1.Meta.ObjectType)">
            <summary>
            Adds a Predicate that evaluates to true if the object under evaluation is an instance of the ObjectType.
            </summary>
            <param name="objectType">the ObjectType.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddInstanceof(Allors.R1.Meta.RoleType,Allors.R1.Meta.ObjectType)">
            <summary>
            Adds a Predicate that evaluates to true if the role of the object under evaluation is an instance of the ObjectType.
            </summary>
            <param name="role">the RoleType .</param>
            <param name="objectType">the ObjectType.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddInstanceof(Allors.R1.Meta.AssociationType,Allors.R1.Meta.ObjectType)">
            <summary>
            Adds a Predicate that evaluates to true if the association of the object under evaluation is an instance of the ObjectType.
            </summary>
            <param name="association">the AssociationType.</param>
            <param name="objectType">the ObjectType.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddLessThan(Allors.R1.Meta.RoleType,System.Object)">
            <summary>
            Adds a Predicate that evaluates to true if the role of the object under evaluation is less than the object.
            </summary>
            <param name="role">The role .</param>
            <param name="value">The object.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddLike(Allors.R1.Meta.RoleType,System.String)">
            <summary>
            Adds a Predicate that evaluates to true if the role of the object under evaluation is like the string (Sql like).
            </summary>
            <param name="role">The role .</param>
            <param name="value">The string.</param>
            <returns>the composing CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddNot">
            <summary>
            Adds a CompositePredicate that evaluates to true if its composed predicate evaluates to false.
            This predicate is ignored when there are no composed predicates.
            </summary>
            <returns>the newly added CompositePredicate</returns>
        </member>
        <member name="M:Allors.R1.ICompositePredicate.AddOr">
            <summary>
            Adds a CompositePredicate that evaluates to true if any of its composed predicates evaluate to true.
            This predicate is ignored when there are no composed predicates.
            </summary>
            <returns>the newly added CompositePredicate</returns>
        </member>
        <member name="T:Allors.R1.IObject">
            <summary>
            <para>
            A strategy based object delegates its framework related
            behavior to its own strategy object.
            </para>
            <para>
            Examples of framework related behavior are: persistence, relation management,
            life cycle management, transaction management, etc.
            </para>
            </summary>
        </member>
        <member name="M:Allors.R1.IObject.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="P:Allors.R1.IObject.Strategy">
            <summary>
            Gets the Strategy.
            </summary>
            <value>The strategy.</value>
        </member>
        <member name="P:Allors.R1.IObject.Id">
            <summary>
            Gets the Object Id.
            </summary>
            <value>The object id.</value>
        </member>
        <member name="T:Allors.R1.IPopulation">
            <summary>
            A population is the container for objects and relations.
            </summary>
        </member>
        <member name="M:Allors.R1.IPopulation.CreateSession">
            <summary>
            Creates a new AllorsSession.
            </summary>
            <returns>a newly created AllorsSession</returns>
        </member>
        <member name="M:Allors.R1.IPopulation.Load(System.Xml.XmlReader)">
            <summary>
            Loads the population from the <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Allors.R1.IPopulation.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the population to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="E:Allors.R1.IPopulation.SessionCreated">
            <summary>
            Occurs when a session is created.
            </summary>
        </member>
        <member name="P:Allors.R1.IPopulation.Id">
            <summary>
             Gets
            <ul>
            <li>the id of this database</li>
            <li>the id of the database from this workspace</li>
            </ul>
            </summary>
        </member>
        <member name="P:Allors.R1.IPopulation.ObjectFactory">
            <summary>
            Gets the object factory.
            </summary>
            <value>The object factory.</value>
        </member>
        <member name="P:Allors.R1.IPopulation.IsDatabase">
            <summary>
            Gets a value indicating whether this population is a database.
            </summary>
            <value>
            <c>true</c> if this population is a database; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.IPopulation.IsWorkspace">
            <summary>
            Gets a value indicating whether this population is a workspace.
            </summary>
            <value>
            <c>true</c> if this population is a workspace; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.IPopulation.Domain">
            <summary>
            Gets the meta domain of this population.
            </summary>
        </member>
        <member name="P:Allors.R1.IPopulation.Item(System.String)">
            <summary>
            Population properties are simple key/value pairs.
            Because Allors objects can not hold instance variables, this is the only way
            for Allors objects to hold references to Non Allors objects or Allors objects
            from a different population.
            </summary>
            <param name="name">The key by which the session object is retrieved.</param>
            <returns>The properties.</returns>
        </member>
        <member name="T:Allors.R1.ISession">
            <summary>
            <para>
            An AllorsSession is a transactional session that provides lifecycle management to objects in the population.
            </para>
            <para>
            Transactions are 'rolling'. After committing or rolling back a transaction an new transaction is automatically started, there is no need to manually 'begin' a transaction.
            </para>
            </summary>
        </member>
        <member name="M:Allors.R1.ISession.Checkpoint">
            <summary>
            Creates a change set of all changes up to this checkpoint,
            starting from either the beginning of the transaction or
            from a previous checkpoint.
            </summary>
            <returns>The change set.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Extent``1">
            <summary>
            Creates an Extent for the specified ObjectType.
            Only works for static domains.
            </summary>
            <typeparam name="T">The type for the extent.</typeparam>
            <returns>The extent.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Extent(Allors.R1.Meta.ObjectType)">
            <summary>
            Creates an Extent for the specified <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
            <param name="objectType">The objectType.</param>
            <returns>The extent.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Except(Allors.R1.Extent,Allors.R1.Extent)">
            <summary>
            Creates an Extent that is the exception of its two operands.
            </summary>
            <param name="firstOperand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The except extent.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Intersect(Allors.R1.Extent,Allors.R1.Extent)">
            <summary>
            Creates an Extent that is the Intersect of its two operands.
            </summary>
            <param name="firstOperand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The intersect extent.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Union(Allors.R1.Extent,Allors.R1.Extent)">
            <summary>
            Creates an Extent that is the Union of its two operands.
            </summary>
            <param name="firstOperand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The union extent.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Commit">
            <summary>
            Commits all changes that where made during this transaction.
            Because transactions are rolling, a new transaction is automatically created.
            </summary>
        </member>
        <member name="M:Allors.R1.ISession.Rollback">
            <summary>
            Rolls back all changes that where made during this transaction.
            Because transactions are rolling, a new transaction is automatically created.
            </summary>
        </member>
        <member name="M:Allors.R1.ISession.Create``1">
            <summary>
            Creates an Allors Object.
            Only works for static domains.
            </summary>
            <typeparam name="T">The ObjectType</typeparam>
            <returns>a new <see cref="T:Allors.R1.IObject"/></returns>
        </member>
        <member name="M:Allors.R1.ISession.Create(Allors.R1.Meta.ObjectType)">
            <summary>
            Creates an Allors Object.
            </summary>
            <param name="objectType">The ObjectType.</param>
            <returns>a new <see cref="T:Allors.R1.IObject"/></returns>
        </member>
        <member name="M:Allors.R1.ISession.Create(Allors.R1.Meta.ObjectType,System.Int32)">
            <summary>
            Creates a specified amount of AllorsObjects.
            </summary>
            <param name="objectType">The ObjectType.</param>
            <param name="count">The count.</param>
            <returns>The created objects.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Instantiate(Allors.R1.IObject)">
            <summary>
            Instantiates an Allors Object.
            </summary>
            <param name="obj">The object.</param>
            <returns>The instantiated object.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Instantiate(System.String)">
            <summary>
            Instantiates an Allors Object.
            </summary>
            <param name="objectId">The object id.</param>
            <returns>The instantiated object.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Instantiate(Allors.R1.ObjectId)">
            <summary>
            Instantiates an Allors Object.
            </summary>
            <param name="objectId">The object id.</param>
            <returns>The instantiated object.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Instantiate(Allors.R1.IObject[])">
            <summary>
            Instantiates an array of Allors Objects.
            </summary>
            <param name="objects">The objects.</param>
            <returns>The instantiated objects.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Instantiate(System.String[])">
            <summary>
            Instantiates an array of Allors Objects.
            </summary>
            <param name="objectIds">The object ids.</param>
            <returns>The instantiated objects.</returns>
        </member>
        <member name="M:Allors.R1.ISession.Instantiate(Allors.R1.ObjectId[])">
            <summary>
            Instantiates an array of Allors Objects.
            </summary>
            <param name="objectIds">The object ids.</param>
            <returns>The instantiated objects.</returns>
        </member>
        <member name="E:Allors.R1.ISession.Committed">
            <summary>
            Occurs when the Commit() method is left.
            Changes to the database are allowed but they occur in a new transaction. 
            </summary>
        </member>
        <member name="E:Allors.R1.ISession.Committing">
            <summary>
            Occurs when the Commit() method is entered.
            Changes to the database are allowed and are within the current transaction. 
            Calls to Commit() and Rollback() during this event are ignored.
            </summary>
        </member>
        <member name="E:Allors.R1.ISession.RollingBack">
            <summary>
            Occurs when the Rollback() method is entered.
            Changes to the database are allowed but will have no effect because the transaction will be rolled back. 
            Calls to Commit() and Rollback() during this event are ignored.
            </summary>
        </member>
        <member name="E:Allors.R1.ISession.RolledBack">
            <summary>
            Occurs when the Rollback() method is left.
            Changes to the database are allowed but they occur in a new transaction. 
            </summary>
        </member>
        <member name="P:Allors.R1.ISession.Population">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:Allors.R1.ISession.Item(System.String)">
            <summary>
            Session properties are simple key/value pairs.
            Because AllorsObjects can not hold instance variables, this is the only way
            for AllorsObjects to hold references to non Allors objects or Allors objects
            from a different population.
            </summary>
            <param name="name">The key by which the session object is retrieved.</param>
            <returns>The property.</returns>
        </member>
        <member name="T:Allors.R1.IStrategy">
            <summary>
            A strategy based object delegates all framework related work
            to its strategy object.
            </summary>
        </member>
        <member name="M:Allors.R1.IStrategy.GetObject">
            <summary>
            Gets the <see cref="T:Allors.R1.IObject"/>.
            </summary>
            <returns>The allors object.</returns>
        </member>
        <member name="M:Allors.R1.IStrategy.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.IStrategy.ExistRole(Allors.R1.Meta.RoleType)">
            <summary>
            Gets a value indicating whether the composite role exists.
            </summary>
            <param name="roleType">The relation type.</param>
            <returns><c>true</c>if the composite role exists; otherwise,<c>false</c> </returns>
        </member>
        <member name="M:Allors.R1.IStrategy.GetRole(Allors.R1.Meta.RoleType)">
            <summary>
            Gets the role.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <returns>The role object.</returns>
        </member>
        <member name="M:Allors.R1.IStrategy.SetRole(Allors.R1.Meta.RoleType,System.Object)">
            <summary>
            Sets the role.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.RemoveRole(Allors.R1.Meta.RoleType)">
            <summary>
            Removes the role.
            </summary>
            <param name="roleType">Type of the relation.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.ExistUnitRole(Allors.R1.Meta.RoleType)">
            <summary>
            Gets a value indicating whether the unit role exists.
            </summary>
            <param name="roleType">The relation type.</param>
            <returns><c>true</c>if the unit role exists; otherwise,<c>false</c> </returns>
        </member>
        <member name="M:Allors.R1.IStrategy.GetUnitRole(Allors.R1.Meta.RoleType)">
            <summary>
            Gets the unit role.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <returns>The role object.</returns>
        </member>
        <member name="M:Allors.R1.IStrategy.SetUnitRole(Allors.R1.Meta.RoleType,System.Object)">
            <summary>
            Sets the unit role.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <param name="unit">The unit .</param>
        </member>
        <member name="M:Allors.R1.IStrategy.RemoveUnitRole(Allors.R1.Meta.RoleType)">
            <summary>
            Removes the unit role.
            </summary>
            <param name="roleType">Type of the relation.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.ExistCompositeRole(Allors.R1.Meta.RoleType)">
            <summary>
            Gets a value indicating whether the composite role exists.
            </summary>
            <param name="roleType">The relation type.</param>
            <returns><c>true</c>if the composite role exists; otherwise,<c>false</c> </returns>
        </member>
        <member name="M:Allors.R1.IStrategy.GetCompositeRole(Allors.R1.Meta.RoleType)">
            <summary>
            Gets the composite role.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <returns>The role object.</returns>
        </member>
        <member name="M:Allors.R1.IStrategy.SetCompositeRole(Allors.R1.Meta.RoleType,Allors.R1.IObject)">
            <summary>
            Sets the composite role.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <param name="composite">The composite.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.RemoveCompositeRole(Allors.R1.Meta.RoleType)">
            <summary>
            Removes the composite role.
            </summary>
            <param name="roleType">Type of the relation.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.ExistCompositeRoles(Allors.R1.Meta.RoleType)">
            <summary>
            Gets a value indicating whether the composite roles exists.
            </summary>
            <param name="roleType">The relation type.</param>
            <returns><c>true</c>if the composite role exists; otherwise,<c>false</c> </returns>
        </member>
        <member name="M:Allors.R1.IStrategy.GetCompositeRoles(Allors.R1.Meta.RoleType)">
            <summary>
            Gets the composite roles.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <returns>The role objects.</returns>
        </member>
        <member name="M:Allors.R1.IStrategy.AddCompositeRole(Allors.R1.Meta.RoleType,Allors.R1.IObject)">
            <summary>
            Adds the composite role.
            </summary>
            <param name="roleType">The relation type..</param>
            <param name="objectToAdd">The object to add.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.RemoveCompositeRole(Allors.R1.Meta.RoleType,Allors.R1.IObject)">
            <summary>
            Removes the composite role.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <param name="objectToRemove">The object to remove.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.SetCompositeRoles(Allors.R1.Meta.RoleType,Allors.R1.Extent)">
            <summary>
            Sets the composite roles.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <param name="roles">The roles.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.RemoveCompositeRoles(Allors.R1.Meta.RoleType)">
            <summary>
            Removes the composite roles.
            </summary>
            <param name="roleType">Type of the relation.</param>
        </member>
        <member name="M:Allors.R1.IStrategy.ExistAssociation(Allors.R1.Meta.AssociationType)">
            <summary>
            Gets a value indicating whether the association exists.
            </summary>
            <param name="associationType">The relation type.</param>
            <returns><c>true</c>if the association exists; otherwise,<c>false</c> </returns>
        </member>
        <member name="M:Allors.R1.IStrategy.GetAssociation(Allors.R1.Meta.AssociationType)">
            <summary>
            Gets the association.
            </summary>
            <param name="roleType">Type of the relation.</param>
            <returns>The association object.</returns>
        </member>
        <member name="M:Allors.R1.IStrategy.ExistCompositeAssociation(Allors.R1.Meta.AssociationType)">
            <summary>
            Gets a value indicating whether the composite association exists.
            </summary>
            <param name="associationType">The relation type.</param>
            <returns><c>true</c>if the composite association exists; otherwise,<c>false</c> </returns>
        </member>
        <member name="M:Allors.R1.IStrategy.GetCompositeAssociation(Allors.R1.Meta.AssociationType)">
            <summary>
            Gets the composite association.
            </summary>
            <param name="associationType">Type of the relation.</param>
            <returns>The association object.</returns>
        </member>
        <member name="M:Allors.R1.IStrategy.ExistCompositeAssociations(Allors.R1.Meta.AssociationType)">
            <summary>
            Gets a value indicating whether the composite associations exists.
            </summary>
            <param name="associationType">The relation type.</param>
            <returns><c>true</c>if the composite associations exists; otherwise,<c>false</c> </returns>
        </member>
        <member name="M:Allors.R1.IStrategy.GetCompositeAssociations(Allors.R1.Meta.AssociationType)">
            <summary>
            Gets the composite associations.
            </summary>
            <param name="associationType">Type of the relation.</param>
            <returns>The association objects.</returns>
        </member>
        <member name="P:Allors.R1.IStrategy.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:Allors.R1.IStrategy.DatabaseSession">
            <summary>
            Gets the database session.
            </summary>
            <value>The database session.</value>
        </member>
        <member name="P:Allors.R1.IStrategy.ObjectType">
            <summary>
            Gets the <see cref="P:Allors.R1.IStrategy.ObjectType"/>.
            </summary>
            <value>The object type.</value>
        </member>
        <member name="P:Allors.R1.IStrategy.ObjectId">
            <summary>
            Gets the <see cref="T:Allors.R1.ObjectId"/>.
            </summary>
            <value>The object id.</value>
        </member>
        <member name="P:Allors.R1.IStrategy.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value>
            <c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.IStrategy.IsNewInSession">
            <summary>
            Gets a value indicating whether this object is new in the current Session.
            </summary>
            <value>
             <c>true</c> if this object is new in the current session otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Allors.R1.IStrategy.IsNewInWorkspace">
            <summary>
            Gets a value indicating whether this object is new in the workspace.
            </summary>
            <value>
             <c>true</c> if this object is new in the workspace otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Allors.R1.Meta.Events.MetaObjectChangedEventArgs">
            <summary>
            The domain changed event arguments.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.Events.MetaObjectChangedEventArgs.#ctor(Allors.R1.Meta.MetaObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.Events.MetaObjectChangedEventArgs"/> class.
            </summary>
            <param name="metaObject">The changed meta object.</param>
        </member>
        <member name="P:Allors.R1.Meta.Events.MetaObjectChangedEventArgs.MetaObject">
            <summary>
            Gets the meta object.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.UnitTypeIds">
            <summary>
            The ids for unit ObjectTypes.
            Ids can be used for long term persistence and should therefore never be changed.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.BinaryId">
            <summary>
            The id of the binary type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.BooleanId">
            <summary>
            The id of the boolean type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.DatetimeId">
            <summary>
            The id of the datetime type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.DecimalId">
            <summary>
            The id of the decimal type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.DoubleId">
            <summary>
            The id of the double type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.IntegerId">
            <summary>
            The id of the integer type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.LongId">
            <summary>
            The id of the long integer type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.StringId">
            <summary>
            The id of the string type.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeIds.Unique">
            <summary>
            The id of the unique type.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.UnitTypeTags">
            <summary>
            The tags for <see cref="P:Allors.R1.Meta.AllorsGenerated.AllorsClassObjectType.UnitTag"/>s.
            Do not use tags for long term persistence, UnitTypeIds should be used for that.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsBinary">
            <summary>
            The tag for the binary <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsBoolean">
            <summary>
            The tag for the boolean <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsDateTime">
            <summary>
            The tag for the date time <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsDecimal">
            <summary>
            The tag for the decimal <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsDouble">
            <summary>
            The tag for the double <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsInteger">
            <summary>
            The tag for the integer <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsLong">
            <summary>
            The tag for the long integer <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsString">
            <summary>
            The tag for the string <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.UnitTypeTags.AllorsUnique">
            <summary>
            The tag for the unique <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
        </member>
        <member name="T:Allors.R1.Meta.ValidationError">
            <summary>
            An error that occurred during validation.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationError.kind">
            <summary>
            The kind of validation.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationError.members">
            <summary>
            The validated member.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationError.message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationError.source">
            <summary>
            The object that contains the member.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ValidationError.#ctor(System.String,System.Object,Allors.R1.Meta.ValidationKind,Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType[])">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.ValidationError"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="kind">The kind .</param>
            <param name="members">The members.</param>
        </member>
        <member name="M:Allors.R1.Meta.ValidationError.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.Meta.ValidationError.Kind">
            <summary>
            Gets the kind of validation.
            </summary>
            <value>The kind of validation.</value>
        </member>
        <member name="P:Allors.R1.Meta.ValidationError.Members">
            <summary>
            Gets the validated members.
            </summary>
            <value>The validated members.</value>
        </member>
        <member name="P:Allors.R1.Meta.ValidationError.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Allors.R1.Meta.ValidationError.Source">
            <summary>
            Gets the object that contains the member.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Allors.R1.Meta.ValidationLog">
            <summary>
            The report of the validation.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationLog.errors">
            <summary>
            The list of errors.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationLog.ids">
            <summary>
            The set of all ids.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationLog.objectTypeNames">
            <summary>
            The set of all <see cref="T:Allors.R1.Meta.ObjectType"/> names.
            </summary>
        </member>
        <member name="F:Allors.R1.Meta.ValidationLog.relationTypeNames">
            <summary>
            The set of all <see cref="T:Allors.R1.Meta.RelationType"/> names.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.Meta.ValidationLog"/> class.
            </summary>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.AddError(System.String,System.Object,Allors.R1.Meta.ValidationKind,Allors.R1.Meta.AllorsGenerated.AllorsEmbeddedRelationType[])">
            <summary>
            Adds a new validation error.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="kind">The kind.</param>
            <param name="members">The members.</param>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.HasErrors(System.Object)">
            <summary>
            Determines whether the specified source object has errors.
            </summary>
            <param name="source">The source.</param>
            <returns>
             <c>true</c> if the specified source object has errors; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.AddId(System.Guid)">
            <summary>
            Adds an id.
            </summary>
            <param name="id">The id   .</param>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.AddObjectTypeName(System.String)">
            <summary>
            Adds the name of the object type.
            </summary>
            <param name="type">The type .</param>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.AddRelationTypeName(System.String)">
            <summary>
            Adds the name of the relation type.
            </summary>
            <param name="relation">The relation.</param>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.ExistId(System.Guid)">
            <summary>
            Gets a value indicating whether the id already exists.
            </summary>
            <param name="id">The id   .</param>
            <returns>The value indicating whether the id already exists.</returns>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.ExistRelationName(System.String)">
            <summary>
            Gets a value indicating whether the  name of the relation already exists.
            </summary>
            <param name="relationName">The name of the relation.</param>
            <returns>The value indicating whether the name of the relation already exists.</returns>
        </member>
        <member name="M:Allors.R1.Meta.ValidationLog.ExistObjectTypeName(System.String)">
            <summary>
            Gets a value indicating whether the name of the type already exists.
            </summary>
            <param name="typeName">The short name of the type.</param>
            <returns>The value indicating whether the name of the type already exists.</returns>
        </member>
        <member name="P:Allors.R1.Meta.ValidationLog.ContainsErrors">
            <summary>
            Gets a value indicating whether this report contains errors.
            </summary>
            <value><c>true</c> if this report contains errors; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Allors.R1.Meta.ValidationLog.Errors">
            <summary>
            Gets the validation errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="P:Allors.R1.Meta.ValidationLog.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>The messages.</value>
        </member>
        <member name="T:Allors.R1.ObjectFactory">
            <summary>
            A base implementation for a static <see cref="T:Allors.R1.IObjectFactory"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectFactory.domain">
            <summary>
            The domain.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectFactory.assembly">
            <summary>
             The assembly.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectFactory.ns">
            <summary>
            The namespace.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectFactory.typeByObjectType">
            <summary>
            <see cref="T:System.Type"/> by <see cref="T:Allors.R1.Meta.ObjectType"/> cache.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectFactory.objectTypeByType">
            <summary>
            <see cref="T:System.Type"/> by <see cref="T:Allors.R1.Meta.ObjectType"/> id cache.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectFactory.objectTypeByObjectTypeId">
            <summary>
            <see cref="T:Allors.R1.Meta.ObjectType"/> by <see cref="T:Allors.R1.Meta.ObjectType"/> id cache.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectFactory.contructorInfoByObjectType">
            <summary>
            <see cref="T:System.Reflection.ConstructorInfo"/> by <see cref="T:Allors.R1.Meta.ObjectType"/> cache.
            </summary>
        </member>
        <member name="M:Allors.R1.ObjectFactory.#ctor(Allors.R1.Meta.Domain,System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.ObjectFactory"/> class.
            </summary>
            <param name="domain">
            The domain.
            </param>
            <param name="assembly">
            The assembly.
            </param>
            <param name="namespace">
            The namespace
            </param>
        </member>
        <member name="M:Allors.R1.ObjectFactory.Create(Allors.R1.IStrategy)">
            <summary>
            Creates a new <see cref="T:Allors.R1.IObject"/> given the <see cref="T:Allors.R1.IStrategy"/>.
            </summary>
            <param name="strategy">The <see cref="T:Allors.R1.IStrategy"/> for the new <see cref="T:Allors.R1.IObject"/>.</param>
            <returns>The new <see cref="T:Allors.R1.IObject"/>.</returns>
        </member>
        <member name="M:Allors.R1.ObjectFactory.GetObjectTypeForType(System.Type)">
            <summary>
            Gets the .Net <see cref="T:System.Type"/> given the Allors <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
            <param name="type">The .Net <see cref="T:System.Type"/>.</param>
            <returns>The Allors <see cref="T:Allors.R1.Meta.ObjectType"/>.</returns>
        </member>
        <member name="M:Allors.R1.ObjectFactory.GetTypeForObjectType(Allors.R1.Meta.ObjectType)">
            <summary>
            Gets the .Net <see cref="T:System.Type"/> given the Allors <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
            <param name="objectType">The Allors <see cref="T:Allors.R1.Meta.ObjectType"/>.</param>
            <returns>The .Net <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Allors.R1.ObjectFactory.GetObjectTypeForType(System.Guid)">
            <summary>
            Gets the .Net <see cref="T:System.Type"/> given the Allors <see cref="T:Allors.R1.Meta.ObjectType"/>.
            </summary>
            <param name="objectTypeId">The Allors <see cref="T:Allors.R1.Meta.ObjectType"/> id.</param>
            <returns>The .Net <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="P:Allors.R1.ObjectFactory.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:Allors.R1.ObjectFactory.Assembly">
            <summary>
            Gets the assembly.
            </summary>
        </member>
        <member name="P:Allors.R1.ObjectFactory.Domain">
            <summary>
            Gets the domain.
            </summary>
        </member>
        <member name="T:Allors.R1.ObjectBase">
            <summary>
            A base implementation for a static <see cref="T:Allors.R1.IObject"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectBase.strategy">
            <summary>
            The <see cref="P:Allors.R1.ObjectBase.Strategy"/>.
            </summary>
        </member>
        <member name="M:Allors.R1.ObjectBase.#ctor(Allors.R1.IStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.ObjectBase"/> class.
            </summary>
            <param name="allors">The allors.</param>
        </member>
        <member name="M:Allors.R1.ObjectBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Allors.R1.ObjectBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            After syncing a new workspace object, the database object
            will receive a new id (when using integer based ids).
            Since the hash code is based on the object's id, this
            means that you can not use Allors Objects as keys during
            a Sync() on a Workspace.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.ObjectBase.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Allors.R1.ObjectBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.ObjectBase.Strategy">
            <summary>
            Gets the <see cref="P:Allors.R1.ObjectBase.Strategy"/>.
            </summary>
            <value>The strategy.</value>
        </member>
        <member name="P:Allors.R1.ObjectBase.Id">
            <summary>
            Gets the object id.
            </summary>
        </member>
        <member name="T:Allors.R1.ObjectId">
            <summary>
            Every <see cref="T:Allors.R1.IObject"/> has an Id.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectId.EmptyObjectIds">
            <summary>
            An empty array of object ids.
            </summary>
        </member>
        <member name="M:Allors.R1.ObjectId.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="P:Allors.R1.ObjectId.Value">
            <summary>
             Gets the value of the Id.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Allors.R1.ObjectId.Key">
            <summary>
            Gets a value that can be used as a properties key 
            in a <see cref="T:Allors.R1.IPopulation"/> or <see cref="T:Allors.R1.ISession"/>.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Allors.R1.ObjectIdInteger">
            <summary>
            A 32 bit <see cref="T:Allors.R1.ObjectId"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectIdInteger.id">
            <summary>
            The object id.
            </summary>
        </member>
        <member name="M:Allors.R1.ObjectIdInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.ObjectIdInteger"/> class.
            </summary>
            <param name="id">The object id.</param>
        </member>
        <member name="M:Allors.R1.ObjectIdInteger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.ObjectIdInteger"/> class.
            </summary>
            <param name="idString">The id string.</param>
        </member>
        <member name="M:Allors.R1.ObjectIdInteger.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. 
            Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Allors.R1.ObjectIdInteger.CompareTo(Allors.R1.ObjectIdInteger)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="other"/>. 
            Zero This instance is equal to <paramref name="other"/>. Greater than zero This instance is greater than <paramref name="other"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="other"/> is not the same type as this instance. 
            </exception>
        </member>
        <member name="M:Allors.R1.ObjectIdInteger.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="other"/> parameter is null.</exception>
        </member>
        <member name="M:Allors.R1.ObjectIdInteger.Equals(Allors.R1.ObjectIdInteger)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="other"/> parameter is null.</exception>
        </member>
        <member name="M:Allors.R1.ObjectIdInteger.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.ObjectIdInteger.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.ObjectIdInteger.Value">
            <summary>
            Gets the value of the Id.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Allors.R1.ObjectIdInteger.ValueInteger">
            <summary>
            Gets the value32.
            </summary>
            <value>The value32.</value>
        </member>
        <member name="T:Allors.R1.ObjectIdLong">
            <summary>
            A 64 bit <see cref="T:Allors.R1.ObjectId"/>.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectIdLong.id">
            <summary>
            The object id.
            </summary>
        </member>
        <member name="M:Allors.R1.ObjectIdLong.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.ObjectIdLong"/> class.
            </summary>
            <param name="id">The object id.</param>
        </member>
        <member name="M:Allors.R1.ObjectIdLong.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.ObjectIdLong"/> class.
            </summary>
            <param name="idString">The id string.</param>
        </member>
        <member name="M:Allors.R1.ObjectIdLong.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. 
            Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Allors.R1.ObjectIdLong.CompareTo(Allors.R1.ObjectIdLong)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="other"/>. 
            Zero This instance is equal to <paramref name="other"/>. Greater than zero This instance is greater than <paramref name="other"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="other"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:Allors.R1.ObjectIdLong.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="other"/> parameter is null.</exception>
        </member>
        <member name="M:Allors.R1.ObjectIdLong.Equals(Allors.R1.ObjectIdLong)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="other"/> parameter is null.</exception>
        </member>
        <member name="M:Allors.R1.ObjectIdLong.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Allors.R1.ObjectIdLong.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.ObjectIdLong.Value">
            <summary>
            Gets the value of the Id.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Allors.R1.ObjectIdLong.ValueLong">
            <summary>
            Gets the value64.
            </summary>
            <value>The value64.</value>
        </member>
        <member name="T:Allors.R1.ObjectNotLoadedEventHandler">
            <summary>
            The loader raises an ObjectNotLoaded event when either the object's 
            saved type is not compatible with the current type or the
            object's saved type doesn't exist in the current domain.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Allors.R1.ObjectNotLoadedEventArgs"/>.</param>
        </member>
        <member name="T:Allors.R1.ObjectNotLoadedEventArgs">
            <summary>
            The object not loaded event arguments.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectNotLoadedEventArgs.objectId">
            <summary>
            The object id.
            </summary>
        </member>
        <member name="F:Allors.R1.ObjectNotLoadedEventArgs.objectTypeId">
            <summary>
            The object type id.
            </summary>
        </member>
        <member name="M:Allors.R1.ObjectNotLoadedEventArgs.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.ObjectNotLoadedEventArgs"/> class.
            </summary>
            <param name="objectTypeId">The object type id.</param>
            <param name="objectId">The object id.</param>
        </member>
        <member name="M:Allors.R1.ObjectNotLoadedEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.ObjectNotLoadedEventArgs.ObjectId">
            <summary>
            Gets the object id.
            </summary>
            <value>The object id.</value>
        </member>
        <member name="P:Allors.R1.ObjectNotLoadedEventArgs.ObjectTypeId">
            <summary>
            Gets the object type id.
            </summary>
            <value>The object type id.</value>
        </member>
        <member name="T:Allors.R1.IDatabaseSession">
            <summary>
            Extends the <see cref="T:Allors.R1.ISession"/> with database capabilities.
            </summary>
        </member>
        <member name="M:Allors.R1.IDatabaseSession.Insert(Allors.R1.Meta.ObjectType,System.String)">
            <summary>
            Inserts an Allors Object with the specified id.
            </summary>
            <param name="objectType">The ObjectType.</param>
            <param name="objectId">The object id.</param>
            <returns>The inserted object.</returns>
        </member>
        <member name="M:Allors.R1.IDatabaseSession.Insert(Allors.R1.Meta.ObjectType,Allors.R1.ObjectId)">
            <summary>
            Inserts an Allors Object with the specified id.
            </summary>
            <param name="objectType">The <see cref="T:Allors.R1.Meta.ObjectType"/>.</param>
            <param name="objectId">The object id.</param>
            <returns>The inserted object.</returns>
        </member>
        <member name="M:Allors.R1.IDatabaseSession.InstantiateStrategy(Allors.R1.ObjectId)">
            <summary>
            Instantiate a strategy.
            This method is primarily used by <see cref="T:Allors.R1.IWorkspace"/>s.
            </summary>
            <param name="objectId">
            The object id.
            </param>
            <returns>
            The <see cref="T:Allors.R1.IStrategy"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.IDatabaseSession.Database">
            <summary>
            Gets the database.
            </summary>
        </member>
        <member name="T:Allors.R1.IDatabase">
            <summary>
            A database is an online <see cref="T:Allors.R1.IPopulation"/>.
            </summary>
        </member>
        <member name="M:Allors.R1.IDatabase.Init">
            <summary>
            Initializes the database. If this population is persistent then
            all existing objects will be deleted.
            </summary>
        </member>
        <member name="M:Allors.R1.IDatabase.CreateSession">
            <summary>
            Creates a new database Session.
            </summary>
            <returns>a newly created AllorsSession</returns>
        </member>
        <member name="M:Allors.R1.IDatabase.CreateWorkspace">
            <summary>
            Creates a new workspace for this database.
            </summary>
            <returns>
            The <see cref="T:Allors.R1.IWorkspace"/>.
            </returns>
        </member>
        <member name="E:Allors.R1.IDatabase.ObjectNotLoaded">
            <summary>
            Occurs when an object could not be loaded.
            </summary>
        </member>
        <member name="E:Allors.R1.IDatabase.RelationNotLoaded">
            <summary>
            Occurs when a relation could not be loaded.
            </summary>
        </member>
        <member name="P:Allors.R1.IDatabase.IsShared">
            <summary>
            Gets a value indicating whether this database is shared with other databases with the same name.
            </summary>
            <value>
              <c>true</c> if this database is shared; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Allors.R1.RelationNotLoadedEventHandler">
            <summary>
            The loader raises an RoleNotLoaded event when either the object's 
            saved relation is not compatible with the current relation or the
            relation's saved type doesn't exist in the current domain.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Allors.R1.RelationNotLoadedEventHandler"/>.</param>
        </member>
        <member name="T:Allors.R1.RelationNotLoadedEventArgs">
            <summary>
            The relation not loaded event arguments.
            </summary>
        </member>
        <member name="F:Allors.R1.RelationNotLoadedEventArgs.relationTypeId">
            <summary>
            The relation type id.
            </summary>
        </member>
        <member name="F:Allors.R1.RelationNotLoadedEventArgs.associationId">
            <summary>
            The association id.
            </summary>
        </member>
        <member name="F:Allors.R1.RelationNotLoadedEventArgs.roleContents">
            <summary>
            The contents of the role.
            </summary>
        </member>
        <member name="M:Allors.R1.RelationNotLoadedEventArgs.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.RelationNotLoadedEventArgs"/> class.
            </summary>
            <param name="relationTypeId">The relation type id.</param>
            <param name="associationId">The association id.</param>
            <param name="roleContents">The role contents.</param>
        </member>
        <member name="M:Allors.R1.RelationNotLoadedEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.RelationNotLoadedEventArgs.RelationTypeId">
            <summary>
            Gets the relation type id.
            </summary>
            <value>The relation type id.</value>
        </member>
        <member name="P:Allors.R1.RelationNotLoadedEventArgs.AssociationId">
            <summary>
            Gets the association id.
            </summary>
            <value>The association id.</value>
        </member>
        <member name="P:Allors.R1.RelationNotLoadedEventArgs.RoleContents">
            <summary>
            Gets the role contents.
            </summary>
            <value>The role contents.</value>
        </member>
        <member name="T:Allors.R1.SessionCommittedEventHandler">
            <summary>
            The EventHandler for the session committed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The committed event arguments.</param>
        </member>
        <member name="T:Allors.R1.SessionCommittedEventArgs">
            <summary>
            The rolled back event arguments.
            </summary>
        </member>
        <member name="F:Allors.R1.SessionCommittedEventArgs.session">
            <summary>
            The session.
            </summary>
        </member>
        <member name="M:Allors.R1.SessionCommittedEventArgs.#ctor(Allors.R1.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.SessionCommittedEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:Allors.R1.SessionCommittedEventArgs.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="T:Allors.R1.SessionCommittingEventHandler">
            <summary>
            The EventHandler for the committing event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The committing event arguments.</param>
        </member>
        <member name="T:Allors.R1.SessionCommittingEventArgs">
            <summary>
            The committing event arguments.
            </summary>
        </member>
        <member name="F:Allors.R1.SessionCommittingEventArgs.session">
            <summary>
            The session
            </summary>
        </member>
        <member name="M:Allors.R1.SessionCommittingEventArgs.#ctor(Allors.R1.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.SessionCommittingEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:Allors.R1.SessionCommittingEventArgs.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="T:Allors.R1.SessionCreatedEventHandler">
            <summary>
            The <see cref="T:Allors.R1.IDatabase"/> raises an <see cref="T:Allors.R1.SessionCreatedEventArgs"/> event 
            a new <see cref="T:Allors.R1.ISession"/> is created.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Allors.R1.SessionCreatedEventArgs"/>.</param>
        </member>
        <member name="T:Allors.R1.SessionCreatedEventArgs">
            <summary>
            The session created event arguments.
            </summary>
        </member>
        <member name="F:Allors.R1.SessionCreatedEventArgs.session">
            <summary>
            The <see cref="T:Allors.R1.ISession"/> that was created.
            </summary>
        </member>
        <member name="M:Allors.R1.SessionCreatedEventArgs.#ctor(Allors.R1.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.SessionCreatedEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Allors.R1.SessionCreatedEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Allors.R1.SessionCreatedEventArgs.Session">
            <summary>
            Gets the session that was created.
            </summary>
            <value>The session that was created.</value>
        </member>
        <member name="T:Allors.R1.SessionRolledBackEventHandler">
            <summary>
            The EventHandler for the rolled back event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The rolled back event arguments.</param>
        </member>
        <member name="T:Allors.R1.SessionRolledBackEventArgs">
            <summary>
            The rolled back event arguments.
            </summary>
        </member>
        <member name="F:Allors.R1.SessionRolledBackEventArgs.session">
            <summary>
            The session.
            </summary>
        </member>
        <member name="M:Allors.R1.SessionRolledBackEventArgs.#ctor(Allors.R1.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.SessionRolledBackEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:Allors.R1.SessionRolledBackEventArgs.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="T:Allors.R1.SessionRollingBackEventHandler">
            <summary>
            The EventhHandler for the rolling back event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The rolling back event arguments.</param>
        </member>
        <member name="T:Allors.R1.SessionRollingBackEventArgs">
            <summary>
            The rolling back event arguments.
            </summary>
        </member>
        <member name="F:Allors.R1.SessionRollingBackEventArgs.session">
            <summary>
            The session
            </summary>
        </member>
        <member name="M:Allors.R1.SessionRollingBackEventArgs.#ctor(Allors.R1.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:Allors.R1.SessionRollingBackEventArgs"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:Allors.R1.SessionRollingBackEventArgs.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="T:Allors.R1.IChangeSet">
            <summary>
            A change set is created during a checkpoint
            and contains all changes that have
            occurred in a <see cref="T:Allors.R1.ISession"/> either starting
            from the beginning of the transaction or from a 
            previous checkpoint.
            </summary>
        </member>
        <member name="M:Allors.R1.IChangeSet.GetRoleTypes(Allors.R1.ObjectId)">
            <summary>
            Get the changed role types for the association.
            </summary>
            <param name="association">
            The association.
            </param>
            <returns>
            The role types.
            </returns>
        </member>
        <member name="P:Allors.R1.IChangeSet.Created">
            <summary>
            Gets the created objects.
            </summary>
        </member>
        <member name="P:Allors.R1.IChangeSet.Deleted">
            <summary>
            Gets the deleted objects.
            </summary>
        </member>
        <member name="P:Allors.R1.IChangeSet.Associations">
            <summary>
            Gets the changed associations.
            </summary>
        </member>
        <member name="P:Allors.R1.IChangeSet.Roles">
            <summary>
            Gets the changed roles.
            </summary>
        </member>
        <member name="P:Allors.R1.IChangeSet.RoleTypesByAssociation">
            <summary>
            Gets the changed role types by association.
            </summary>
        </member>
        <member name="T:Allors.R1.IConflict">
            <summary>
            An object or relation conflict between a Workspace and a Database relation.
            </summary>
        </member>
        <member name="P:Allors.R1.IConflict.Object">
            <summary>
            Gets Object.
            </summary>
        </member>
        <member name="P:Allors.R1.IConflict.ObjectId">
            <summary>
            Gets ObjectId.
            </summary>
        </member>
        <member name="P:Allors.R1.IConflict.RoleType">
            <summary>
            Gets the relation type.
            </summary>
            <value>The relation type.</value>
        </member>
        <member name="T:Allors.R1.IWorkspace">
            <summary>
            A workspace is an <see cref="T:Allors.R1.IPopulation"/> that is connected
            to a <see cref="T:Allors.R1.IPopulation"/> and allows
            changes to be synced back to its database when needed.
            This allows for transparent long running transactions.
            </summary>
        </member>
        <member name="M:Allors.R1.IWorkspace.CreateSession">
            <summary>
            Creates a workspace session.
            </summary>
            <returns>
            The created workspace session.
            </returns>
        </member>
        <member name="P:Allors.R1.IWorkspace.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="T:Allors.R1.IWorkspaceSession">
            <summary>
            Extends <see cref="T:Allors.R1.ISession"/> with workspace capabilities. 
            </summary>
        </member>
        <member name="M:Allors.R1.IWorkspaceSession.Sync">
            <summary>
            Sync the changes from this workspace back to the database.
            </summary>
        </member>
        <member name="M:Allors.R1.IWorkspaceSession.Resolve(Allors.R1.IConflict)">
            <summary>
            Resolve a single conflict.
            </summary>
            <param name="conflict">
            The conflict.
            </param>
        </member>
        <member name="M:Allors.R1.IWorkspaceSession.Resolve(Allors.R1.IConflict[])">
            <summary>
            Resolve multiple conflicts.
            </summary>
            <param name="conflicts">
            The conflicts.
            </param>
        </member>
        <member name="M:Allors.R1.IWorkspaceSession.LocalExtent">
            <summary>
            Get all <see cref="T:Allors.R1.IObject"/>s that are local in this workspace.
            </summary>
            <returns>
            The local extent.
            </returns>
        </member>
        <member name="M:Allors.R1.IWorkspaceSession.LocalExtent(Allors.R1.Meta.ObjectType)">
            <summary>
            Get all <see cref="T:Allors.R1.IObject"/>s that are local in this workspace and of the specified type.
            </summary>
            <param name="objectType">
            The object Type.
            </param>
            <returns>
            The local extent.
            </returns>
        </member>
        <member name="P:Allors.R1.IWorkspaceSession.DatabaseSession">
            <summary>
            Gets the database session.
            </summary>
            <value>The database session.</value>
        </member>
        <member name="P:Allors.R1.IWorkspaceSession.Workspace">
            <summary>
            Gets the workspace.
            </summary>
        </member>
        <member name="P:Allors.R1.IWorkspaceSession.Conflicts">
            <summary>
            Gets the conflicts.
            </summary>
        </member>
    </members>
</doc>
